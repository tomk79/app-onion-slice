<?php
/* ---------------------

  onion-slice v0.0.1-alpha.1+dev

--------------------- */

namespace renconFramework;

// =-=-=-=-=-=-=-=-=-=-=-= Configuration START =-=-=-=-=-=-=-=-=-=-=-=



$conf = new \stdClass();


/* --------------------------------------
 * ログインユーザーのIDとパスワードの対
 * 
 * `$conf->users` に 登録されたユーザーが、ログインを許可されます。
 * ユーザーIDを キー に、sha1ハッシュ化されたパスワード文字列を 値 に持つ連想配列で設定してください。
 * ユーザーは、複数登録できます。
 */
$conf->users = array(
	"admin" => sha1("admin"),
);


/* --------------------------------------
 * データディレクトリのパス
 * 
 * アプリケーションが専有的に使用するディレクトリを与えてください。
 * ここには、各種の状態を記憶したり、設定を保存したり、
 * Pickles 2 プロジェクトデータを生成したりする用途で使用します。
 */
$conf->path_data_dir = './.onion-slice/';


/* --------------------------------------
 * コマンドのパス
 */
$conf->commands = (object) array();
$conf->commands->php = 'php';
$conf->commands->git = 'git';





// =-=-=-=-=-=-=-=-=-=-=-= / Configuration END =-=-=-=-=-=-=-=-=-=-=-=


$rencon = new rencon( $conf );
$rencon->run();

class rencon {

	private $conf;
	private $fs;
	private $req;
	private $user;
	private $theme;
	private $resources;

	private $app_id = 'onion-slice';
	private $app_name = 'onion-slice';

	public function __construct( $conf ){
		$this->conf = new conf( $conf );
		$this->fs = new filesystem();
		$this->req = new request();
		$this->user = new user($this);
		$this->resources = new resources($this);
	}

	public function conf(){ return $this->conf; }
	public function fs(){ return $this->fs; }
	public function req(){ return $this->req; }
	public function user(){ return $this->user; }
	public function theme(){ return $this->theme; }
	public function resources(){ return $this->resources; }

	public function app_id(){ return $this->app_id; }
	public function app_name(){ return $this->app_name; }

	public function run(){
		header('Content-type: text/html'); // default

		$route = array(

'' => (object) array(
	"title" => 'Home',
	"page" => function(){
$rencon = $this; ?>
<p>ようこそ、Pickles 2</p>
<?php return; },
),
'test' => (object) array(
	"title" => 'Test',
	"page" => 'tomk79\\onionSlice\\test::start',
),


		);

		$action = $this->req->get_param('a');
		$resource = $this->req->get_param('res');
		$controller = null;
		$app_info = array(
			'id' => $this->app_id,
			'name' => $this->app_name,
			'pages' => $route,
		);
		$page_info = array(
			'id' => $action,
			'title' => 'Home',
		);
		$this->theme = new theme( $this, $app_info, $page_info );

		// --------------------------------------
		// リソースへのリクエストを処理
		if( strlen($resource) ){
			header("Content-type: ".$this->resources->get_mime_type($resource));
			$bin = $this->resources->get($resource);
			echo $bin;
			exit();

		}

		// --------------------------------------
		// ログイン処理
		$login = new login($this, $app_info);

		if( $action == 'logout' ){
			$login->logout();
			exit;
		}

		if( !$login->check() ){
			if( $action == 'logout' || $action == 'login' ){
				$this->req()->set_param('a', null);
			}
			$login->please_login();
			exit;
		}

		if( $action == 'logout' || $action == 'login' ){
			$this->req()->set_param('a', null);
		}

		// --------------------------------------
		// middleware

		$middleware = array (
  0 => 'tomk79\\onionSlice\\middleware\\setup::setup_wizard',
);

		foreach( $middleware as $method ){
			list( $className, $funcName ) = explode('::', $method);
			$tmp_obj = new $className();
			call_user_func( array($tmp_obj, $funcName), $this );
		}



		// --------------------------------------
		// コンテンツを処理
		if( array_key_exists( $action, $route ) ){
			$controller = $route[$action];
			$page_info['title'] = $controller->title;
			$this->theme()->set_current_page_info( $page_info );

			ob_start();
			call_user_func( $controller->page );
			$content = ob_get_clean();


			$html = $this->theme()->bind( $content );
			echo $html;

		}else{
			$this->notfound();
		}
		exit();
	}


	/**
	 * Not Found ページを表示して終了する
	 */
	public function notfound(){
		$page_info['title'] = 'Not Found';
		$this->theme()->set_current_page_info( $page_info );

		$content = '<p>404: Not Found</p>';
		$html = $this->theme()->bind( $content );
		echo $html;
		exit;
	}

	/**
	 * Forbidden ページを表示して終了する
	 */
	public function forbidden(){
		$page_info['title'] = 'Forbidden';
		$this->theme()->set_current_page_info( $page_info );

		$content = '<p>403: Forbidden</p>';
		$html = $this->theme()->bind( $content );
		echo $html;
		exit;
	}

}
?><?php
namespace renconFramework;

/**
 * rencon conf class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class conf{
	private $conf;
	public $users;
	public $databases;

	/**
	 * Constructor
	 */
	public function __construct( $conf ){
		$this->conf = (object) $conf;
		foreach( $this->conf as $key=>$val ){
			$this->{$key} = $val;
		}

		// --------------------------------------
		// $conf->users
		$this->users = null;
		if( property_exists( $conf, 'users' ) && !is_null( $conf->users ) ){
			$this->users = (array) $conf->users;
		}

		// --------------------------------------
		// $conf->databases
		$this->databases = null;
		if( property_exists( $conf, 'databases' ) && !is_null( $conf->databases ) ){
			$this->databases = (array) $conf->databases;
		}

	}

	/**
	 * コンフィグ値を取得する
	 */
	public function get( $key = null ){
		if( is_null( $key ) ){
			return $this->conf;
		}
		if( property_exists( $this->conf, $key ) ){
			return $this->conf->{$key};
		}
		return false;
	}

	/**
	 * ログインが必要か？
	 */
	public function is_login_required(){
		if( !is_array($this->users) ){
			return false;
		}
		return true;
	}

}
?><?php
namespace renconFramework;

/**
 * tomk79/filesystem core class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class filesystem{

	/**
	 * ファイルおよびディレクトリ操作時のデフォルトパーミッション
	 */
	private $default_permission = array('dir'=>0775,'file'=>0775);
	/**
	 * ファイルシステムの文字セット
	 */
	private $filesystem_encoding = null;

	/**
	 * コンストラクタ
	 *
	 * @param object $conf 設定オブジェクト
	 */
	public function __construct($conf=null){
		$conf = json_decode( json_encode($conf), true );
		if(!is_array($conf)){
			$conf = array();
		}
		if( array_key_exists('file_default_permission', $conf) && strlen( $conf['file_default_permission'] ) ){
			$this->default_permission['file'] = octdec( $conf['file_default_permission'] );
		}
		if( array_key_exists('dir_default_permission', $conf) && strlen( $conf['dir_default_permission'] ) ){
			$this->default_permission['dir'] = octdec( $conf['dir_default_permission'] );
		}
		if( array_key_exists('filesystem_encoding', $conf) && strlen( $conf['filesystem_encoding'] ) ){
			$this->filesystem_encoding = trim( $conf['filesystem_encoding'] );
		}
	}

	/**
	 * 書き込み/上書きしてよいアイテムか検証する。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool 書き込み可能な場合 `true`、不可能な場合に `false` を返します。
	 */
	public function is_writable( $path ){
		$path = $this->localize_path($path);
		if( !$this->is_file($path) ){
			return @is_writable( dirname($path) );
		}
		return @is_writable( $path );
	}//is_writable()

	/**
	 * 読み込んでよいアイテムか検証する。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool 読み込み可能な場合 `true`、不可能な場合に `false` を返します。
	 */
	public function is_readable( $path ){
		$path = $this->localize_path($path);
		return @is_readable( $path );
	}//is_readable()

	/**
	 * ファイルが存在するかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ファイルが存在する場合 `true`、存在しない場合、またはディレクトリが存在する場合に `false` を返します。
	 */
	public function is_file( $path ){
		$path = $this->localize_path($path);
		return @is_file( $path );
	}//is_file()

	/**
	 * シンボリックリンクかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ファイルがシンボリックリンクの場合 `true`、存在しない場合、それ以外の場合に `false` を返します。
	 */
	public function is_link( $path ){
		$path = $this->localize_path($path);
		return @is_link( $path );
	}//is_link()

	/**
	 * ディレクトリが存在するかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ディレクトリが存在する場合 `true`、存在しない場合、またはファイルが存在する場合に `false` を返します。
	 */
	public function is_dir( $path ){
		$path = $this->localize_path($path);
		return @is_dir( $path );
	}//is_dir()

	/**
	 * ファイルまたはディレクトリが存在するかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ファイルまたはディレクトリが存在する場合 `true`、存在しない場合に `false` を返します。
	 */
	public function file_exists( $path ){
		$path = $this->localize_path($path);
		return @file_exists( $path );
	}//file_exists()

	/**
	 * ディレクトリを作成する。
	 *
	 * @param string $dirpath 作成するディレクトリのパス
	 * @param int $perm 作成するディレクトリに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function mkdir( $dirpath , $perm = null ){
		$dirpath = $this->localize_path($dirpath);

		if( $this->is_dir( $dirpath ) ){
			// 既にディレクトリがあったら、作成を試みない。
			$this->chmod( $dirpath , $perm );
			return true;
		}
		$result = @mkdir( $dirpath );
		$this->chmod( $dirpath , $perm );
		clearstatcache();
		return	$result;
	}//mkdir()

	/**
	 * ディレクトリを作成する(上層ディレクトリも全て作成)
	 *
	 * @param string $dirpath 作成するディレクトリのパス
	 * @param int $perm 作成するディレクトリに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function mkdir_r( $dirpath , $perm = null ){
		$dirpath = $this->localize_path($dirpath);
		if( $this->is_dir( $dirpath ) ){
			return true;
		}
		if( $this->is_file( $dirpath ) ){
			return false;
		}
		$patharray = explode( DIRECTORY_SEPARATOR , $this->localize_path( $this->get_realpath($dirpath) ) );
		$targetpath = '';
		foreach( $patharray as $idx=>$Line ){
			if( !strlen( $Line ) || $Line == '.' || $Line == '..' ){ continue; }
			if(!($idx===0 && DIRECTORY_SEPARATOR == '\\' && preg_match('/^[a-zA-Z]\:$/s', $Line))){
				$targetpath .= DIRECTORY_SEPARATOR;
			}
			$targetpath .= $Line;

			// clearstatcache();
			if( !$this->is_dir( $targetpath ) ){
				$targetpath = $this->localize_path( $targetpath );
				if( !$this->mkdir( $targetpath , $perm ) ){
					return false;
				}
			}
		}
		return true;
	}//mkdir_r()

	/**
	 * ファイルやディレクトリを中身ごと完全に削除する。
	 *
	 * このメソッドは、ファイルやシンボリックリンクも削除します。
	 * ディレクトリを削除する場合は、中身ごと完全に削除します。
	 * シンボリックリンクは、その先を追わず、シンボリックリンク本体のみを削除します。
	 *
	 * @param string $path 対象のパス
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function rm( $path ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){
			return false;
		}
		$path = @realpath( $path );
		if( $path === false ){ return false; }
		if( $this->is_file( $path ) || $this->is_link( $path ) ){
			// ファイルまたはシンボリックリンクの場合の処理
			$result = @unlink( $path );
			return	$result;

		}elseif( $this->is_dir( $path ) ){
			// ディレクトリの処理
			$flist = $this->ls( $path );
			if( is_array($flist) ){
				foreach ( $flist as $Line ){
					if( $Line == '.' || $Line == '..' ){ continue; }
					$this->rm( $path.DIRECTORY_SEPARATOR.$Line );
				}
			}
			$result = @rmdir( $path );
			return	$result;

		}

		return false;
	}//rm()

	/**
	 * ディレクトリを削除する。
	 *
	 * このメソッドはディレクトリを削除します。
	 * 中身のない、空のディレクトリ以外は削除できません。
	 *
	 * @param string $path 対象ディレクトリのパス
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function rmdir( $path ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){
			return false;
		}
		$path = @realpath( $path );
		if( $path === false ){
			return false;
		}
		if( $this->is_file( $path ) || $this->is_link( $path ) ){
			// ファイルまたはシンボリックリンクの場合の処理
			// ディレクトリ以外は削除できません。
			return false;

		}elseif( $this->is_dir( $path ) ){
			// ディレクトリの処理
			// rmdir() は再帰的削除を行いません。
			// 再帰的に削除したい場合は、代わりに `rm()` または `rmdir_r()` を使用します。
			return @rmdir( $path );
		}

		return false;
	}//rmdir()

	/**
	 * ディレクトリを再帰的に削除する。
	 *
	 * このメソッドはディレクトリを再帰的に削除します。
	 * 中身のない、空のディレクトリ以外は削除できません。
	 *
	 * @param string $path 対象ディレクトリのパス
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function rmdir_r( $path ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){
			return false;
		}
		$path = @realpath( $path );
		if( $path === false ){
			return false;
		}
		if( $this->is_file( $path ) || $this->is_link( $path ) ){
			// ファイルまたはシンボリックリンクの場合の処理
			// ディレクトリ以外は削除できません。
			return false;

		}elseif( $this->is_dir( $path ) ){
			// ディレクトリの処理
			$filelist = $this->ls($path);
			if( is_array($filelist) ){
				foreach( $filelist as $basename ){
					if( $this->is_file( $path.DIRECTORY_SEPARATOR.$basename ) ){
						$this->rm( $path.DIRECTORY_SEPARATOR.$basename );
					}else if( !$this->rmdir_r( $path.DIRECTORY_SEPARATOR.$basename ) ){
						return false;
					}
				}
			}
			return $this->rmdir( $path );
		}

		return false;
	}//rmdir_r()


	/**
	 * ファイルを上書き保存する。
	 *
	 * このメソッドは、`$filepath` にデータを保存します。
	 * もともと保存されていた内容は破棄され、新しいデータで上書きします。
	 *
	 * @param string $filepath 保存先ファイルのパス
	 * @param string $content 保存する内容
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function save_file( $filepath , $content , $perm = null ){
		$filepath = $this->get_realpath($filepath);
		$filepath = $this->localize_path($filepath);

		if( $this->is_dir( $filepath ) ){
			return false;
		}
		if( !$this->is_writable( $filepath ) ){
			return false;
		}

		if( !strlen( $content ) ){
			// 空白のファイルで上書きしたい場合
			if( $this->is_file( $filepath ) ){
				@unlink( $filepath );
			}
			@touch( $filepath );
			$this->chmod( $filepath , $perm );
			clearstatcache();
			return $this->is_file( $filepath );
		}

		clearstatcache();
		$fp = fopen( $filepath, 'w' );
		if( !is_resource( $fp ) ){
			return false;
		}

		for ($written = 0; $written < strlen($content); $written += $fwrite) {
			$fwrite = fwrite($fp, substr($content, $written));
			if ($fwrite === false) {
				break;
			}
		}

		fclose($fp);

		$this->chmod( $filepath , $perm );
		clearstatcache();
		return !empty( $written );
	}//save_file()

	/**
	 * ファイルの中身を文字列として取得する。
	 *
	 * @param string $path ファイルのパス
	 * @return string ファイル `$path` の内容
	 */
	public function read_file( $path ){
		$path = $this->localize_path($path);
		return file_get_contents( $path );
	}//file_get_contents()

	/**
	 * ファイルの更新日時を比較する。
	 *
	 * @param string $path_a 比較対象A
	 * @param string $path_b 比較対象B
	 * @return bool|null
	 * `$path_a` の方が新しかった場合に `true`、
	 * `$path_b` の方が新しかった場合に `false`、
	 * 同時だった場合に `null` を返します。
	 *
	 * いずれか一方、または両方のファイルが存在しない場合、次のように振る舞います。
	 * - 両方のファイルが存在しない場合 = `null`
	 * - $path_a が存在せず、$path_b は存在する場合 = `false`
	 * - $path_a が存在し、$path_b は存在しない場合 = `true`
	 */
	public function is_newer_a_than_b( $path_a , $path_b ){
		$path_a = $this->localize_path($path_a);
		$path_b = $this->localize_path($path_b);

		// 比較できない場合に
		if(!file_exists($path_a) && !file_exists($path_b)){return null;}
		if(!file_exists($path_a)){return false;}
		if(!file_exists($path_b)){return true;}

		$mtime_a = filemtime( $path_a );
		$mtime_b = filemtime( $path_b );
		if( $mtime_a > $mtime_b ){
			return true;
		}elseif( $mtime_a < $mtime_b ){
			return false;
		}
		return null;
	}//is_newer_a_than_b()

	/**
	 * ファイル名/ディレクトリ名を変更する。
	 *
	 * @param string $original 現在のファイルまたはディレクトリ名
	 * @param string $newname 変更後のファイルまたはディレクトリ名
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function rename( $original , $newname ){
		$original = $this->localize_path($original);
		$newname  = $this->localize_path($newname );

		if( !@file_exists( $original ) ){ return false; }
		if( !$this->is_writable( $original ) ){ return false; }
		return @rename( $original , $newname );
	}//rename()

	/**
	 * ファイル名/ディレクトリ名を強制的に変更する。
	 *
	 * 移動先の親ディレクトリが存在しない場合にも、親ディレクトリを作成して移動するよう試みます。
	 *
	 * @param string $original 現在のファイルまたはディレクトリ名
	 * @param string $newname 変更後のファイルまたはディレクトリ名
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function rename_f( $original , $newname ){
		$original = $this->localize_path($original);
		$newname  = $this->localize_path($newname );

		if( !@file_exists( $original ) ){ return false; }
		if( !$this->is_writable( $original ) ){ return false; }
		$dirname = dirname( $newname );
		if( !$this->is_dir( $dirname ) ){
			if( !$this->mkdir_r( $dirname ) ){
				return false;
			}
		}
		return @rename( $original , $newname );
	}//rename_f()

	/**
	 * 絶対パスを得る。
	 *
	 * パス情報を受け取り、スラッシュから始まるサーバー内部絶対パスに変換して返します。
	 *
	 * このメソッドは、PHPの `realpath()` と異なり、存在しないパスも絶対パスに変換します。
	 *
	 * @param string $path 対象のパス
	 * @param string $cd カレントディレクトリパス。
	 * 実在する有効なディレクトリのパス、または絶対パスの表現で指定される必要があります。
	 * 省略時、カレントディレクトリを自動採用します。
	 * @return string 絶対パス
	 */
	public function get_realpath( $path, $cd = '.' ){
		$is_dir = false;
		if( preg_match( '/(\/|\\\\)+$/s', $path ) ){
			$is_dir = true;
		}
		$path = $this->localize_path($path);
		if( is_null($cd) ){ $cd = '.'; }
		$cd = $this->localize_path($cd);
		$preg_dirsep = preg_quote(DIRECTORY_SEPARATOR, '/');

		if( $this->is_dir($cd) ){
			$cd = realpath($cd);
		}elseif( !preg_match('/^((?:[A-Za-z]\\:'.$preg_dirsep.')|'.$preg_dirsep.'{1,2})(.*?)$/', $cd) ){
			$cd = false;
		}
		if( $cd === false ){
			return false;
		}

		$prefix = '';
		$localpath = $path;
		if( preg_match('/^((?:[A-Za-z]\\:'.$preg_dirsep.')|'.$preg_dirsep.'{1,2})(.*?)$/', $path, $matched) ){
			// もともと絶対パスの指定か調べる
			$prefix = preg_replace('/'.$preg_dirsep.'$/', '', $matched[1]);
			$localpath = $matched[2];
			$cd = null; // 元の指定が絶対パスだったら、カレントディレクトリは関係ないので捨てる。
		}

		$path = $cd.DIRECTORY_SEPARATOR.'.'.DIRECTORY_SEPARATOR.$localpath;

		if( file_exists( $prefix.$path ) ){
			$rtn = realpath( $prefix.$path );
			if( $is_dir && $rtn != realpath('/') ){
				$rtn .= DIRECTORY_SEPARATOR;
			}
			return $rtn;
		}

		$paths = explode( DIRECTORY_SEPARATOR, $path );
		$path = '';
		foreach( $paths as $idx=>$row ){
			if( $row == '' || $row == '.' ){
				continue;
			}
			if( $row == '..' ){
				$path = dirname($path);
				if($path == DIRECTORY_SEPARATOR){
					$path = '';
				}
				continue;
			}
			if(!($idx===0 && DIRECTORY_SEPARATOR == '\\' && preg_match('/^[a-zA-Z]\:$/s', $row))){
				$path .= DIRECTORY_SEPARATOR;
			}
			$path .= $row;
		}

		$rtn = $prefix.$path;
		if( $is_dir ){
			$rtn .= DIRECTORY_SEPARATOR;
		}
		return $rtn;
	}

	/**
	 * 相対パスを得る。
	 *
	 * パス情報を受け取り、ドットスラッシュから始まる相対絶対パスに変換して返します。
	 *
	 * @param string $path 対象のパス
	 * @param string $cd カレントディレクトリパス。
	 * 実在する有効なディレクトリのパス、または絶対パスの表現で指定される必要があります。
	 * 省略時、カレントディレクトリを自動採用します。
	 * @return string 相対パス
	 */
	public function get_relatedpath( $path, $cd = '.' ){
		$is_dir = false;
		if( preg_match( '/(\/|\\\\)+$/s', $path ) ){
			$is_dir = true;
		}
		if( @!strlen( $cd ) ){
			$cd = realpath('.');
		}elseif( $this->is_dir($cd) ){
			$cd = realpath($cd);
		}elseif( $this->is_file($cd) ){
			$cd = realpath(dirname($cd));
		}
		$path = $this->get_realpath($path, $cd);

		$normalize = function( $tmp_path, $fs ){
			$tmp_path = $fs->localize_path( $tmp_path );
			$preg_dirsep = preg_quote(DIRECTORY_SEPARATOR, '/');
			if( DIRECTORY_SEPARATOR == '\\' ){
				$tmp_path = preg_replace( '/^[a-zA-Z]\:/s', '', $tmp_path );
			}
			$tmp_path = preg_replace( '/^('.$preg_dirsep.')+/s', '', $tmp_path );
			$tmp_path = preg_replace( '/('.$preg_dirsep.')+$/s', '', $tmp_path );
			if( strlen($tmp_path) ){
				$tmp_path = explode( DIRECTORY_SEPARATOR, $tmp_path );
			}else{
				$tmp_path = array();
			}

			return $tmp_path;
		};

		$cd = $normalize($cd, $this);
		$path = $normalize($path, $this);

		$rtn = array();
		while( 1 ){
			if( !count($cd) || !count($path) ){
				break;
			}
			if( $cd[0] === $path[0] ){
				array_shift( $cd );
				array_shift( $path );
				continue;
			}
			break;
		}
		if( count($cd) ){
			foreach($cd as $dirname){
				array_push( $rtn, '..' );
			}
		}else{
			array_push( $rtn, '.' );
		}
		$rtn = array_merge( $rtn, $path );
		$rtn = implode( DIRECTORY_SEPARATOR, $rtn );

		if( $is_dir ){
			$rtn .= DIRECTORY_SEPARATOR;
		}
		return $rtn;
	}

	/**
	 * パス情報を得る。
	 *
	 * @param string $path 対象のパス
	 * @return array パス情報
	 */
	public function pathinfo( $path ){
		if(strpos($path,'#')!==false){ list($path, $hash) = @explode( '#', $path, 2 ); }
		if(strpos($path,'?')!==false){ list($path, $query) = @explode( '?', $path, 2 ); }

		$pathinfo = pathinfo( $path );
		$pathinfo['filename'] = $this->trim_extension( $pathinfo['basename'] );
		$pathinfo['extension'] = $this->get_extension( $pathinfo['basename'] );
		$pathinfo['query'] = (@strlen($query) ? '?'.$query : null);
		$pathinfo['hash'] = (@strlen($hash) ? '#'.$hash : null);
		return $pathinfo;
	}

	/**
	 * パス情報から、ファイル名を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 抜き出されたファイル名
	 */
	public function get_basename( $path ){
		$path = pathinfo( $path , PATHINFO_BASENAME );
		if( !strlen($path) ){$path = null;}
		return $path;
	}

	/**
	 * パス情報から、拡張子を除いたファイル名を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 拡張子が除かれたパス
	 */
	public function trim_extension( $path ){
		$pathinfo = pathinfo( $path );
		$RTN = preg_replace( '/\.'.preg_quote( @$pathinfo['extension'], '/' ).'$/' , '' , $path );
		return $RTN;
	}

	/**
	 * ファイル名を含むパス情報から、ファイルが格納されているディレクトリ名を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 親ディレクトリのパス
	 */
	public function get_dirpath( $path ){
		$path = pathinfo( $path , PATHINFO_DIRNAME );
		if( !strlen($path) ){$path = null;}
		return $path;
	}

	/**
	 * パス情報から、拡張子を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 拡張子
	 */
	public function get_extension( $path ){
		$path = preg_replace('/\#.*$/si', '', $path);
		$path = preg_replace('/\?.*$/si', '', $path);
		$path = pathinfo( $path , PATHINFO_EXTENSION );
		if(!strlen($path)){$path = null;}
		return $path;
	}


	/**
	 * CSVファイルを読み込む。
	 *
	 * @param string $path 対象のCSVファイルのパス
	 * @param array $options オプション
	 * - delimiter = 区切り文字(省略時、カンマ)
	 * - enclosure = クロージャー文字(省略時、ダブルクオート)
	 * - size = 一度に読み込むサイズ(省略時、10000)
	 * - charset = 文字セット(省略時、UTF-8)
	 * @return array|bool 読み込みに成功した場合、行列を格納した配列、失敗した場合には `false` を返します。
	 */
	public function read_csv( $path , $options = array() ){
		// $options['charset'] は、保存されているCSVファイルの文字エンコードです。
		// 省略時は UTF-8 から、内部エンコーディングに変換します。

		$path = $this->localize_path($path);

		if( !$this->is_file( $path ) ){
			// ファイルがなければfalseを返す
			return false;
		}

		if( !strlen( @$options['delimiter'] ) )    { $options['delimiter'] = ','; }
		if( !strlen( @$options['enclosure'] ) )    { $options['enclosure'] = '"'; }
		if( !strlen( @$options['size'] ) )         { $options['size'] = 10000; }
		if( !strlen( @$options['charset'] ) )      { $options['charset'] = 'UTF-8'; }//←CSVの文字セット

		$RTN = array();
		$fp = fopen( $path, 'r' );
		if( !is_resource( $fp ) ){
			return false;
		}

		while( $SMMEMO = fgetcsv( $fp , intval( $options['size'] ) , $options['delimiter'] , $options['enclosure'] ) ){
			foreach( $SMMEMO as $key=>$row ){
				$SMMEMO[$key] = mb_convert_encoding( $row , mb_internal_encoding() , $options['charset'].',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP' );
			}
			array_push( $RTN , $SMMEMO );
		}
		fclose($fp);
		return $RTN;
	}//read_csv()

	/**
	 * 配列をCSV形式に変換する。
	 *
	 * 改行コードはLFで出力されます。
	 *
	 * @param array $array 2次元配列
	 * @param array $options オプション
	 * - charset = 文字セット(省略時、UTF-8)
	 * @return string 生成されたCSV形式のテキスト
	 */
	public function mk_csv( $array , $options = array() ){
		// $options['charset'] は、出力されるCSV形式の文字エンコードを指定します。
		// 省略時は UTF-8 に変換して返します。
		if( !is_array( $array ) ){ $array = array(); }

		if( @!strlen( $options['charset'] ) ){
			$options['charset'] = 'UTF-8';
		}
		$RTN = '';
		foreach( $array as $Line ){
			if( is_null( $Line ) ){ continue; }
			if( !is_array( $Line ) ){ $Line = array(); }
			foreach( $Line as $cell ){
				$cell = mb_convert_encoding( $cell , $options['charset'] , mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP' );
				if( preg_match( '/"/' , $cell ) ){
					$cell = preg_replace( '/"/' , '""' , $cell);
				}
				if( strlen( $cell ) ){
					$cell = '"'.$cell.'"';
				}
				$RTN .= $cell.',';
			}
			$RTN = preg_replace( '/,$/' , '' , $RTN );
			$RTN .= "\n";
		}
		return $RTN;
	}//mk_csv()

	/**
	 * ファイルを複製する。
	 *
	 * @param string $from コピー元ファイルのパス
	 * @param string $to コピー先のパス
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function copy( $from , $to , $perm = null ){
		$from = $this->localize_path($from);
		$to   = $this->localize_path($to  );

		if( !$this->is_file( $from ) ){
			return false;
		}
		if( !$this->is_readable( $from ) ){
			return false;
		}

		if( $this->is_file( $to ) ){
			//	まったく同じファイルだった場合は、複製しないでtrueを返す。
			if( md5_file( $from ) == md5_file( $to ) && filesize( $from ) == filesize( $to ) ){
				return true;
			}
		}
		if( !@copy( $from , $to ) ){
			return false;
		}
		$this->chmod( $to , $perm );
		return true;
	}//copy()

	/**
	 * ディレクトリを複製する(下層ディレクトリも全てコピー)
	 *
	 * @param string $from コピー元ファイルのパス
	 * @param string $to コピー先のパス
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function copy_r( $from , $to , $perm = null ){
		$from = $this->localize_path($from);
		$to   = $this->localize_path($to  );

		$result = true;

		if( $this->is_file( $from ) ){
			if( $this->mkdir_r( dirname( $to ) ) ){
				if( !$this->copy( $from , $to , $perm ) ){
					$result = false;
				}
			}else{
				$result = false;
			}
		}elseif( $this->is_dir( $from ) ){
			if( !$this->is_dir( $to ) ){
				if( !$this->mkdir_r( $to ) ){
					$result = false;
				}
			}
			$itemlist = $this->ls( $from );
			if( is_array($itemlist) ){
				foreach( $itemlist as $Line ){
					if( $Line == '.' || $Line == '..' ){ continue; }
					if( $this->is_dir( $from.DIRECTORY_SEPARATOR.$Line ) ){
						if( $this->is_file( $to.DIRECTORY_SEPARATOR.$Line ) ){
							continue;
						}elseif( !$this->is_dir( $to.DIRECTORY_SEPARATOR.$Line ) ){
							if( !$this->mkdir_r( $to.DIRECTORY_SEPARATOR.$Line ) ){
								$result = false;
							}
						}
						if( !$this->copy_r( $from.DIRECTORY_SEPARATOR.$Line , $to.DIRECTORY_SEPARATOR.$Line , $perm ) ){
							$result = false;
						}
						continue;
					}elseif( $this->is_file( $from.DIRECTORY_SEPARATOR.$Line ) ){
						if( !$this->copy_r( $from.DIRECTORY_SEPARATOR.$Line , $to.DIRECTORY_SEPARATOR.$Line , $perm ) ){
							$result = false;
						}
						continue;
					}
				}
			}
		}

		return $result;
	}//copy_r()

	/**
	 * パーミッションを変更する。
	 *
	 * @param string $filepath 対象のパス
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function chmod( $filepath , $perm = null ){
		$filepath = $this->localize_path($filepath);

		if( is_null( $perm ) ){
			if( $this->is_dir( $filepath ) ){
				$perm = $this->default_permission['dir'];
			}else{
				$perm = $this->default_permission['file'];
			}
		}
		if( is_null( $perm ) ){
			$perm = 0775; // コンフィグに設定モレがあった場合
		}
		return @chmod( $filepath , $perm );
	}//chmod()

	/**
	 * パーミッション情報を調べ、3桁の数字で返す。
	 *
	 * @param string $path 対象のパス
	 * @return int|bool 成功時に 3桁の数字、失敗時に `false` を返します。
	 */
	public function get_permission( $path ){
		$path = $this->localize_path($path);

		if( !@file_exists( $path ) ){
			return false;
		}
		$perm = rtrim( sprintf( "%o\n" , fileperms( $path ) ) );
		$start = strlen( $perm ) - 3;
		return substr( $perm , $start , 3 );
	}//get_permission()


	/**
	 * ディレクトリにあるファイル名のリストを配列で返す。
	 *
	 * @param string $path 対象ディレクトリのパス
	 * @return array|bool 成功時にファイルまたはディレクトリ名の一覧を格納した配列、失敗時に `false` を返します。
	 */
	public function ls($path){
		$path = $this->localize_path($path);

		if( $path === false ){ return false; }
		if( !@file_exists( $path ) ){ return false; }
		if( !$this->is_dir( $path ) ){ return false; }

		$RTN = array();
		$dr = @opendir($path);
		while( ( $ent = readdir( $dr ) ) !== false ){
			// CurrentDirとParentDirは含めない
			if( $ent == '.' || $ent == '..' ){ continue; }
			array_push( $RTN , $ent );
		}
		closedir($dr);
		if( strlen( $this->filesystem_encoding ) ){
			//PxFW 0.6.4 追加
			$RTN = @$this->convert_filesystem_encoding( $RTN );
		}
		usort($RTN, "strnatcmp");
		return	$RTN;
	}//ls()

	/**
	 * ディレクトリの内部を比較し、$comparisonに含まれない要素を$targetから削除する。
	 *
	 * @param string $target クリーニング対象のディレクトリパス
	 * @param string $comparison 比較するディレクトリのパス
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function compare_and_cleanup( $target , $comparison ){
		if( is_null( $comparison ) || is_null( $target ) ){ return false; }

		$target = $this->localize_path($target);
		$comparison = $this->localize_path($comparison);

		if( !@file_exists( $comparison ) && @file_exists( $target ) ){
			$this->rm( $target );
			return true;
		}

		if( $this->is_dir( $target ) ){
			$flist = $this->ls( $target );
		}else{
			return true;
		}

		if( is_array($flist) ){
			foreach ( $flist as $Line ){
				if( $Line == '.' || $Line == '..' ){ continue; }
				$this->compare_and_cleanup( $target.DIRECTORY_SEPARATOR.$Line , $comparison.DIRECTORY_SEPARATOR.$Line );
			}
		}

		return true;
	}//compare_and_cleanup()

	/**
	 * ディレクトリを同期する。
	 *
	 * @param string $path_sync_from 同期元ディレクトリ
	 * @param string $path_sync_to 同期先ディレクトリ
	 * @return bool 常に `true` を返します。
	 */
	public function sync_dir( $path_sync_from , $path_sync_to ){
		$this->copy_r( $path_sync_from , $path_sync_to );
		$this->compare_and_cleanup( $path_sync_to , $path_sync_from );
		return true;
	}//sync_dir()

	/**
	 * 指定されたディレクトリ以下の、全ての空っぽのディレクトリを削除する。
	 *
	 * @param string $path ディレクトリパス
	 * @param array $options オプション
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function remove_empty_dir( $path , $options = array() ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){ return false; }
		if( !$this->is_dir( $path ) ){ return false; }
		if( $this->is_file( $path ) || $this->is_link( $path ) ){ return false; }
		$path = @realpath( $path );
		if( $path === false ){ return false; }

		// --------------------------------------
		// 次の階層を処理するかどうかのスイッチ
		$switch_donext = false;
		if( is_null( $options['depth'] ) ){
			// 深さの指定がなければ掘る
			$switch_donext = true;
		}elseif( !is_int( $options['depth'] ) ){
			// 指定がnullでも数値でもなければ掘らない
			$switch_donext = false;
		}elseif( $options['depth'] <= 0 ){
			// 指定がゼロ以下なら、今回の処理をして終了
			$switch_donext = false;
		}elseif( $options['depth'] > 0 ){
			// 指定が正の数(ゼロは含まない)なら、掘る
			$options['depth'] --;
			$switch_donext = true;
		}else{
			return false;
		}
		// / 次の階層を処理するかどうかのスイッチ
		// --------------------------------------

		$flist = $this->ls( $path );
		if( !count( $flist ) ){
			// 開いたディレクトリの中身が
			// "." と ".." のみだった場合
			// 削除して終了
			$result = @rmdir( $path );
			return	$result;
		}
		$alive = false;
		foreach ( $flist as $Line ){
			if( $Line == '.' || $Line == '..' ){ continue; }
			if( $this->is_link( $path.DIRECTORY_SEPARATOR.$Line ) ){
				// シンボリックリンクは無視する。
			}elseif( $this->is_dir( $path.DIRECTORY_SEPARATOR.$Line ) ){
				if( $switch_donext ){
					// さらに掘れと指令があれば、掘る。
					$this->remove_empty_dir( $path.DIRECTORY_SEPARATOR.$Line , $options );
				}
			}
			if( @file_exists( $path.DIRECTORY_SEPARATOR.$Line ) ){
				$alive = true;
			}
		}
		if( !$alive ){
			$result = @rmdir( $path );
			return	$result;
		}
		return true;
	}//remove_empty_dir()


	/**
	 * 指定された2つのディレクトリの内容を比較し、まったく同じかどうか調べる。
	 *
	 * @param string $dir_a 比較対象ディレクトリA
	 * @param string $dir_b 比較対象ディレクトリB
	 * @param array $options オプション
	 * <dl>
	 *   <dt>bool $options['compare_filecontent']</dt>
	 * 	   <dd>ファイルの中身も比較するか？</dd>
	 *   <dt>bool $options['compare_emptydir']</dt>
	 * 	   <dd>空っぽのディレクトリの有無も評価に含めるか？</dd>
	 * </dl>
	 * @return bool 同じ場合に `true`、異なる場合に `false` を返します。
	 */
	public function compare_dir( $dir_a , $dir_b , $options = array() ){

		if( strlen( $this->filesystem_encoding ) ){
			//PxFW 0.6.4 追加
			$dir_a = @$this->convert_filesystem_encoding( $dir_a );
			$dir_b = @$this->convert_filesystem_encoding( $dir_b );
		}

		if( ( $this->is_file( $dir_a ) && !$this->is_file( $dir_b ) ) || ( !$this->is_file( $dir_a ) && $this->is_file( $dir_b ) ) ){
			return false;
		}
		if( ( ( $this->is_dir( $dir_a ) && !$this->is_dir( $dir_b ) ) || ( !$this->is_dir( $dir_a ) && $this->is_dir( $dir_b ) ) ) && $options['compare_emptydir'] ){
			return false;
		}

		if( $this->is_file( $dir_a ) && $this->is_file( $dir_b ) ){
			// --------------------------------------
			// 両方ファイルだったら
			if( $options['compare_filecontent'] ){
				// ファイルの内容も比較する設定の場合、
				// それぞれファイルを開いて同じかどうかを比較
				$filecontent_a = $this->read_file( $dir_a );
				$filecontent_b = $this->read_file( $dir_b );
				if( $filecontent_a !== $filecontent_b ){
					return false;
				}
			}
			return true;
		}

		if( $this->is_dir( $dir_a ) || $this->is_dir( $dir_b ) ){
			// --------------------------------------
			// 両方ディレクトリだったら
			$contlist_a = $this->ls( $dir_a );
			$contlist_b = $this->ls( $dir_b );

			if( $options['compare_emptydir'] && $contlist_a !== $contlist_b ){
				// 空っぽのディレクトリも厳密に評価する設定で、
				// ディレクトリ内の要素配列の内容が異なれば、false。
				return false;
			}

			$done = array();
			foreach( $contlist_a as $Line ){
				// Aをチェック
				if( $Line == '..' || $Line == '.' ){ continue; }
				if( !$this->compare_dir( $dir_a.DIRECTORY_SEPARATOR.$Line , $dir_b.DIRECTORY_SEPARATOR.$Line , $options ) ){
					return false;
				}
				$done[$Line] = true;
			}

			foreach( $contlist_b as $Line ){
				// Aに含まれなかったBをチェック
				if( $done[$Line] ){ continue; }
				if( $Line == '..' || $Line == '.' ){ continue; }
				if( !$this->compare_dir( $dir_a.DIRECTORY_SEPARATOR.$Line , $dir_b.DIRECTORY_SEPARATOR.$Line , $options ) ){
					return false;
				}
				$done[$Line] = true;
			}

		}

		return true;
	}//compare_dir()


	/**
	 * サーバがUNIXパスか調べる。
	 *
	 * @return bool UNIXパスなら `true`、それ以外なら `false` を返します。
	 */
	public function is_unix(){
		if( DIRECTORY_SEPARATOR == '/' ){
			return true;
		}
		return false;
	}//is_unix()

	/**
	 * サーバがWindowsパスか調べる。
	 *
	 * @return bool Windowsパスなら `true`、それ以外なら `false` を返します。
	 */
	public function is_windows(){
		if( DIRECTORY_SEPARATOR == '\\' ){
			return true;
		}
		return false;
	}//is_windows()


	/**
	 * パスを正規化する。
	 *
	 * 受け取ったパスを、スラッシュ区切りの表現に正規化します。
	 * Windowsのボリュームラベルが付いている場合は削除します。
	 * URIスキーム(http, https, ftp など) で始まる場合、2つのスラッシュで始まる場合(`//www.example.com/abc/` など)、これを残して正規化します。
	 *
	 *  - 例： `\a\b\c.html` → `/a/b/c.html` バックスラッシュはスラッシュに置き換えられます。
	 *  - 例： `/a/b////c.html` → `/a/b/c.html` 余計なスラッシュはまとめられます。
	 *  - 例： `C:\a\b\c.html` → `/a/b/c.html` ボリュームラベルは削除されます。
	 *  - 例： `http://a/b/c.html` → `http://a/b/c.html` URIスキームは残されます。
	 *  - 例： `//a/b/c.html` → `//a/b/c.html` ドメイン名は残されます。
	 *
	 * @param string $path 正規化するパス
	 * @return string 正規化されたパス
	 */
	public function normalize_path($path){
		$path = trim($path);
		$path = $this->convert_encoding( $path );//文字コードを揃える
		$path = preg_replace( '/\\/|\\\\/s', '/', $path );//バックスラッシュをスラッシュに置き換える。
		$path = preg_replace( '/^[A-Z]\\:\\//s', '/', $path );//Windowsのボリュームラベルを削除
		$prefix = '';
		if( preg_match( '/^((?:[a-zA-Z0-9]+\\:)?\\/)(\\/.*)$/', $path, $matched ) ){
			$prefix = $matched[1];
			$path = $matched[2];
		}
		$path = preg_replace( '/\\/+/s', '/', $path );//重複するスラッシュを1つにまとめる
		return $prefix.$path;
	}


	/**
	 * パスをOSの標準的な表現に変換する。
	 *
	 * 受け取ったパスを、OSの標準的な表現に変換します。
	 * - スラッシュとバックスラッシュの違いを吸収し、`DIRECTORY_SEPARATOR` に置き換えます。
	 *
	 * @param string $path ローカライズするパス
	 * @return string ローカライズされたパス
	 */
	public function localize_path($path){
		$path = $this->convert_filesystem_encoding( $path );//文字コードを揃える
		$path = preg_replace( '/\\/|\\\\/s', '/', $path );//一旦スラッシュに置き換える。
		if( $this->is_unix() ){
			// Windows以外だった場合に、ボリュームラベルを受け取ったら削除する
			$path = preg_replace( '/^[A-Z]\\:\\//s', '/', $path );//Windowsのボリュームラベルを削除
		}
		$path = preg_replace( '/\\/+/s', '/', $path );//重複するスラッシュを1つにまとめる
		$path = preg_replace( '/\\/|\\\\/s', DIRECTORY_SEPARATOR, $path );
		return $path;
	}



	/**
	 * 受け取ったテキストを、ファイルシステムエンコードに変換する。
	 *
	 * @param mixed $text テキスト
	 * @return string 文字セット変換後のテキスト
	 */
	private function convert_filesystem_encoding( $text ){
		$RTN = $text;
		if( !is_callable( 'mb_internal_encoding' ) ){
			return $text;
		}
		if( !strlen( $this->filesystem_encoding ) ){
			return $text;
		}

		$to_encoding = $this->filesystem_encoding;
		$from_encoding = mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP,JIS,ASCII';

		return $this->convert_encoding( $text, $to_encoding, $from_encoding );

	}//convert_filesystem_encoding()

	/**
	 * 受け取ったテキストを、ファイルシステムエンコードに変換する。
	 *
	 * @param mixed $text テキスト
	 * @param string $to_encoding 文字セット(省略時、内部文字セット)
	 * @param string $from_encoding 変換前の文字セット
	 * @return string 文字セット変換後のテキスト
	 */
	public function convert_encoding( $text, $to_encoding = null, $from_encoding = null ){
		$RTN = $text;
		if( !is_callable( 'mb_internal_encoding' ) ){
			return $text;
		}

		$to_encoding_fin = $to_encoding;
		if( !strlen($to_encoding_fin) ){
			$to_encoding_fin = mb_internal_encoding();
		}
		if( !strlen($to_encoding_fin) ){
			$to_encoding_fin = 'UTF-8';
		}

		$from_encoding_fin = (strlen($from_encoding)?$from_encoding.',':'').mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP,JIS,ASCII';

		// ---
		if( is_array( $text ) ){
			$RTN = array();
			if( !count( $text ) ){
				return $text;
			}
			foreach( $text as $key=>$row ){
				$RTN[$key] = $this->convert_encoding( $row, $to_encoding, $from_encoding );
			}
		}else{
			if( !strlen( $text ) ){
				return $text;
			}
			$RTN = mb_convert_encoding( $text, $to_encoding_fin, $from_encoding_fin );
		}
		return $RTN;
	}//convert_encoding()

	/**
	 * 受け取ったテキストを、指定の改行コードに変換する。
	 *
	 * @param mixed $text テキスト
	 * @param string $crlf 改行コード名。CR|LF(default)|CRLF
	 * @return string 改行コード変換後のテキスト
	 */
	public function convert_crlf( $text, $crlf = null ){
		if( !strlen($crlf) ){
			$crlf = 'LF';
		}
		$crlf_code = "\n";
		switch(strtoupper($crlf)){
			case 'CR':
				$crlf_code = "\r";
				break;
			case 'CRLF':
				$crlf_code = "\r\n";
				break;
			case 'LF':
			default:
				$crlf_code = "\n";
				break;
		}
		$RTN = $text;
		if( is_array( $text ) ){
			$RTN = array();
			if( !count( $text ) ){
				return $text;
			}
			foreach( $text as $key=>$val ){
				$RTN[$key] = $this->convert_crlf( $val , $crlf );
			}
		}else{
			if( !strlen( $text ) ){
				return $text;
			}
			$RTN = preg_replace( '/\r\n|\r|\n/', $crlf_code, $text );
		}
		return $RTN;
	}

}
?><?php
namespace renconFramework;

/**
 * tomk79/request core class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class request{
	/**
	 * 設定オブジェクト
	 */
	private $conf;
	/**
	 * ファイルシステムオブジェクト
	 */
	private $fs;
	/**
	 * URLパラメータ
	 */
	private $param = array();
	/**
	 * コマンドからのアクセス フラグ
	 */
	private $flg_cmd = false;
	/**
	 * 優先ディレクトリインデックス
	 */
	private $directory_index_primary;
	/**
	 * コマンドラインオプション
	 */
	private $cli_options;
	/**
	 * コマンドラインパラメータ
	 */
	private $cli_params;

	/**
	 * コンストラクタ
	 *
	 * @param object $conf 設定オブジェクト
	 */
	public function __construct($conf=null){
		$this->conf = $conf;
		if( !is_object($this->conf) ){
			$this->conf = json_decode('{}');
		}

		if(!property_exists($this->conf, 'get') || !@is_array($this->conf->get)){
			$this->conf->get = $_GET;
		}
		if(!property_exists($this->conf, 'post') || !@is_array($this->conf->post)){
			$this->conf->post = $_POST;
		}
		if(!property_exists($this->conf, 'files') || !@is_array($this->conf->files)){
			$this->conf->files = $_FILES;
		}
		if(!property_exists($this->conf, 'server') || !@is_array($this->conf->server)){
			$this->conf->server = $_SERVER;
		}
		if( !array_key_exists( 'PATH_INFO' , $this->conf->server ) ){
			$this->conf->server['PATH_INFO'] = null;
		}
		if( !array_key_exists( 'HTTP_USER_AGENT' , $this->conf->server ) ){
			$this->conf->server['HTTP_USER_AGENT'] = null;
		}
		if( !array_key_exists( 'argv' , $this->conf->server ) ){
			$this->conf->server['argv'] = null;
		}
		if(!property_exists($this->conf, 'session_name') || !@strlen($this->conf->session_name)){
			$this->conf->session_name = 'SESSID';
		}
		if(!property_exists($this->conf, 'session_expire') || !@strlen($this->conf->session_expire)){
			$this->conf->session_expire = 1800;
		}
		if(!property_exists($this->conf, 'directory_index_primary') || !@strlen($this->conf->directory_index_primary)){
			$this->conf->directory_index_primary = 'index.html';
		}
		if(!property_exists($this->conf, 'cookie_default_path') || !@strlen($this->conf->cookie_default_path)){
			// クッキーのデフォルトのパス
			// session の範囲もこの設定に従う。
			$this->conf->cookie_default_path = $this->get_path_current_dir();
		}

		$this->parse_input();
		$this->session_start();
	}

	/**
	 *	入力値を解析する。
	 *
	 * `$_GET`, `$_POST`, `$_FILES` に送られたパラメータ情報を取りまとめ、1つの連想配列としてまとめま、オブジェクト内に保持します。
	 *
	 * コマンドラインから実行された場合は、コマンドラインオプションをそれぞれ `=` 記号で区切り、URLパラメータ同様にパースします。
	 *
	 * このメソッドの処理には、入力文字コードの変換(UTF-8へ統一)などの整形処理が含まれます。
	 *
	 * @return bool 常に `true`
	 */
	private function parse_input(){
		$this->cli_params = array();
		$this->cli_options = array();

		if( !array_key_exists( 'REMOTE_ADDR' , $this->conf->server ) ){
			//  コマンドラインからの実行か否か判断
			$this->flg_cmd = true;//コマンドラインから実行しているかフラグ
			if( is_array( $this->conf->server['argv'] ) && count( $this->conf->server['argv'] ) ){
				$tmp_path = null;
				for( $i = 0; count( $this->conf->server['argv'] ) > $i; $i ++ ){
					if( preg_match( '/^\-/', $this->conf->server['argv'][$i] ) ){
						$this->cli_params = array();//オプションの前に引数は付けられない
						$this->cli_options[$this->conf->server['argv'][$i]] = $this->conf->server['argv'][$i+1];
						$i ++;
					}else{
						array_push( $this->cli_params, $this->conf->server['argv'][$i] );
					}
				}
				$tmp_path = @$this->cli_params[count($this->cli_params)-1];
				if( preg_match( '/^\//', $tmp_path ) && @is_array($this->conf->server['argv']) ){
					$tmp_path = array_pop( $this->conf->server['argv'] );
					$tmp_path = parse_url($tmp_path);
					@parse_str( $tmp_path['query'], $query );
					if( is_array($query) ){
						$this->conf->get = array_merge( $this->conf->get, $query );
					}
				}
				unset( $tmp_path );
			}
		}

		if( ini_get('magic_quotes_gpc') ){
			// PHPINIのmagic_quotes_gpc設定がOnだったら、
			// エスケープ文字を削除。
			foreach( array_keys( $this->conf->get ) as $Line ){
				$this->conf->get[$Line] = self::stripslashes( $this->conf->get[$Line] );
			}
			foreach( array_keys( $this->conf->post ) as $Line ){
				$this->conf->post[$Line] = self::stripslashes( $this->conf->post[$Line] );
			}
		}

		$this->conf->get = self::convert_encoding( $this->conf->get );
		$this->conf->post = self::convert_encoding( $this->conf->post );
		$param = array_merge( $this->conf->get , $this->conf->post );
		$param = $this->normalize_input( $param );

		if( is_array( $this->conf->files ) ){
			$FILES_KEYS = array_keys( $this->conf->files );
			foreach($FILES_KEYS as $Line){
				$this->conf->files[$Line]['name'] = self::convert_encoding( $this->conf->files[$Line]['name'] );
				$this->conf->files[$Line]['name'] = mb_convert_kana( $this->conf->files[$Line]['name'] , 'KV' , mb_internal_encoding() );
				$param[$Line] = $this->conf->files[$Line];
			}
		}

		$this->param = $param;
		unset($param);

		return	true;
	}//parse_input()

	/**
	 *	入力値に対する標準的な変換処理
	 *
	 * @param array $param パラメータ
	 * @return array 変換後のパラメータ
	 */
	private function normalize_input( $param ){
		$is_callable_mb_check_encoding = is_callable( 'mb_check_encoding' );
		foreach( $param as $key=>$val ){
			// URLパラメータを加工
			if( is_array( $val ) ){
				// 配列なら
				$param[$key] = $this->normalize_input( $param[$key] );
			}elseif( is_string( $param[$key] ) ){
				// 文字列なら
				$param[$key] = mb_convert_kana( $param[$key] , 'KV' , mb_internal_encoding() );
					// 半角カナは全角に統一
				$param[$key] = preg_replace( '/\r\n|\r|\n/' , "\n" , $param[$key] );
					// 改行コードはLFに統一
				if( $is_callable_mb_check_encoding ){
					// 不正なバイトコードのチェック
					if( !mb_check_encoding( $key , mb_internal_encoding() ) ){
						// キーの中に見つけたらパラメータごと削除
						unset( $param[$key] );
					}
					if( !mb_check_encoding( $param[$key] , mb_internal_encoding() ) ){
						// 値の中に見つけたら false に置き換える
						$param[$key] = false;
					}
				}
			}
		}
		return $param;
	}//normalize_input()

	/**
	 * パラメータを取得する。
	 *
	 * `$_GET`, `$_POST`、`$_FILES` を合わせた連想配列の中から `$key` に当たる値を引いて返します。
	 * キーが定義されていない場合は、`null` を返します。
	 *
	 * @param string $key URLパラメータ名
	 * @return mixed URLパラメータ値
	 */
	public function get_param( $key ){
		if( !array_key_exists($key, $this->param) ){ return null; }
		return @$this->param[$key];
	}//get_param()

	/**
	 * パラメータをセットする。
	 *
	 * @param string $key パラメータ名
	 * @param mixed $val パラメータ値
	 * @return bool 常に `true`
	 */
	public function set_param( $key , $val ){
		$this->param[$key] = $val;
		return true;
	}//set_param()

	/**
	 * パラメータをすべて取得する。
	 *
	 * @return array すべてのパラメータを格納する連想配列
	 */
	public function get_all_params(){
		return $this->param;
	}

	/**
	 * コマンドラインオプションを取得する
	 * @param string $name オプション名
	 * @return string 指定されたオプション値
	 */
	public function get_cli_option( $name ){
		if( !array_key_exists($name, $this->cli_options) ){
			return null;
		}
		return @$this->cli_options[$name];
	}

	/**
	 * すべてのコマンドラインオプションを連想配列で取得する
	 * @return array すべてのコマンドラインオプション
	 */
	public function get_cli_options(){
		return @$this->cli_options;
	}

	/**
	 * コマンドラインパラメータを取得する
	 * @param string $idx パラメータ番号
	 * @return string 指定されたオプション値
	 */
	public function get_cli_param( $idx = 0 ){
		if($idx < 0){
			// マイナスのインデックスが与えられた場合、
			// 配列の最後から数える
			$idx = count($this->cli_params)+$idx;
		}
		return @$this->cli_params[$idx];
	}

	/**
	 * すべてのコマンドラインパラメータを配列で取得する
	 * @return array すべてのコマンドラインパラメータ
	 */
	public function get_cli_params(){
		return @$this->cli_params;
	}



	// ----- cookies -----

	/**
	 * クッキー情報を取得する。
	 *
	 * @param string $key クッキー名
	 * @return mixed クッキーの値
	 */
	public function get_cookie( $key ){
		if( @!is_array( $_COOKIE ) ){ return null; }
		if( @!array_key_exists($key, $_COOKIE) ){ return null; }
		return	@$_COOKIE[$key];
	}//get_cookie()

	/**
	 * クッキー情報をセットする。
	 *
	 * @param string $key クッキー名
	 * @param string $val クッキー値
	 * @param string $expire クッキーの有効期限
	 * @param string $path サーバー上での、クッキーを有効としたいパス
	 * @param string $domain クッキーが有効なドメイン
	 * @param bool $secure クライアントからのセキュアな HTTPS 接続の場合にのみクッキーが送信されるようにします。デフォルトは `true`
	 * @return 成功時 `true`、失敗時 `false` を返します。
	 */
	public function set_cookie( $key , $val , $expire = null , $path = null , $domain = null , $secure = true ){
		if( is_null( $path ) ){
			$path = $this->conf->cookie_default_path;
			if( !strlen( $path ) ){
				$path = $this->get_path_current_dir();
			}
			if( !strlen( $path ) ){
				$path = '/';
			}
		}
		if( !@setcookie( $key , $val , $expire , $path , $domain , $secure ) ){
			return false;
		}

		$_COOKIE[$key] = $val;//現在の処理からも呼び出せるように
		return true;
	}//set_cookie()

	/**
	 * クッキー情報を削除する。
	 *
	 * @param string $key クッキー名
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function delete_cookie( $key ){
		if( !@setcookie( $key , null ) ){
			return false;
		}
		unset( $_COOKIE[$key] );
		return true;
	}//delete_cookie()



	// ----- session -----

	/**
	 * セッションを開始する。
	 *
	 * @param string $sid セッションID。省略時、自動発行。
	 * @return bool セッションが正常に開始した場合に `true`、それ以外の場合に `false` を返します。
	 */
	private function session_start( $sid = null ){
		$expire = intval($this->conf->session_expire);
		$cache_limiter = 'nocache';
		$session_name = 'SESSID';
		if( strlen( $this->conf->session_name ) ){
			$session_name = $this->conf->session_name;
		}
		$path = $this->conf->cookie_default_path;
		if( !strlen( $path ) ){
			$path = $this->get_path_current_dir();
		}
		if( !strlen( $path ) ){
			$path = '/';
		}

		@session_name( $session_name );
		@session_cache_limiter( $cache_limiter );
		@session_cache_expire( intval($expire/60) );

		if( intval( ini_get( 'session.gc_maxlifetime' ) ) < $expire + 10 ){
			// ガベージコレクションの生存期間が
			// $expireよりも短い場合は、上書きする。
			// バッファは固定値で10秒。
			@ini_set( 'session.gc_maxlifetime' , $expire + 10 );
		}

		@session_set_cookie_params( 0 , $path );
			//  セッションクッキー自体の寿命は定めない(=0)
			//  そのかわり、SESSION_LAST_MODIFIED を新設し、自分で寿命を管理する。

		if( strlen( $sid ) ){
			// セッションIDに指定があれば、有効にする。
			session_id( $sid );
		}

		// セッションを開始
		$rtn = @session_start();

		// セッションの有効期限を評価
		if( strlen( $this->get_session( 'SESSION_LAST_MODIFIED' ) ) && intval( $this->get_session( 'SESSION_LAST_MODIFIED' ) ) < intval( time() - $expire ) ){
			#	セッションの有効期限が切れていたら、セッションキーを再発行。
			if( is_callable('session_regenerate_id') ){
				@session_regenerate_id( true );
			}
		}
		$this->set_session( 'SESSION_LAST_MODIFIED' , time() );
		return $rtn;
	}//session_start()

	/**
	 * セッションIDを取得する。
	 *
	 * @return string セッションID
	 */
	public function get_session_id(){
		return session_id();
	}//get_session_id()

	/**
	 * セッション情報を取得する。
	 *
	 * @param string $key セッションキー
	 * @return mixed `$key` に対応するセッション値
	 */
	public function get_session( $key ){
		if( @!is_array( $_SESSION ) ){ return null; }
		if( @!array_key_exists($key, $_SESSION) ){ return null; }
		return @$_SESSION[$key];
	}//get_session()

	/**
	 * セッション情報をセットする。
	 *
	 * @param string $key セッションキー
	 * @param mixed $val `$key` に対応するセッション値
	 * @return bool 常に `true` を返します。
	 */
	public function set_session( $key , $val ){
		$_SESSION[$key] = $val;
		return true;
	}//set_session()

	/**
	 * セッション情報を削除する。
	 *
	 * @param string $key セッションキー
	 * @return bool 常に `true` を返します。
	 */
	public function delete_session( $key ){
		unset( $_SESSION[$key] );
		return true;
	}//delete_session()


	// ----- upload file access -----

	/**
	 * アップロードされたファイルをセッションに保存する。
	 *
	 * @param string $key セッションキー
	 * @param array $ulfileinfo アップロードファイル情報
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function save_uploadfile( $key , $ulfileinfo ){
		// base64でエンコードして、バイナリデータを持ちます。
		// $ulfileinfo['content'] にバイナリを格納して渡すか、
		// $ulfileinfo['tmp_name'] または $ulfileinfo['path'] のいずれかに、
		// アップロードファイルのパスを指定してください。
		$fileinfo = array();
		$fileinfo['name'] = $ulfileinfo['name'];
		$fileinfo['type'] = $ulfileinfo['type'];

		if( $ulfileinfo['content'] ){
			$fileinfo['content'] = base64_encode( $ulfileinfo['content'] );
		}else{
			$filepath = '';
			if( @is_file( $ulfileinfo['tmp_name'] ) ){
				$filepath = $ulfileinfo['tmp_name'];
			}elseif( @is_file( $ulfileinfo['path'] ) ){
				$filepath = $ulfileinfo['path'];
			}else{
				return false;
			}
			$fileinfo['content'] = base64_encode( file_get_contents( $filepath ) );
		}

		if( @!is_array( $_SESSION ) ){
			$_SESSION = array();
		}
		if( @!array_key_exists('FILE', $_SESSION) ){
			$_SESSION['FILE'] = array();
		}

		$_SESSION['FILE'][$key] = $fileinfo;
		return	true;
	}
	/**
	 * セッションに保存されたファイル情報を取得する。
	 *
	 * @param string $key セッションキー
	 * @return array|bool 成功時、ファイル情報 を格納した連想配列、失敗時 `false` を返します。
	 */
	public function get_uploadfile( $key ){
		if(!strlen($key)){ return false; }
		if( @!is_array( $_SESSION ) ){
			return false;
		}
		if( @!array_key_exists('FILE', $_SESSION) ){
			return false;
		}
		if( @!array_key_exists($key, $_SESSION['FILE']) ){
			return false;
		}

		$rtn = @$_SESSION['FILE'][$key];
		if( is_null( $rtn ) ){ return false; }

		$rtn['content'] = base64_decode( @$rtn['content'] );
		return	$rtn;
	}
	/**
	 * セッションに保存されたファイル情報の一覧を取得する。
	 *
	 * @return array ファイル情報 を格納した連想配列
	 */
	public function get_uploadfile_list(){
		if( @!array_key_exists('FILE', $_SESSION) ){
			return false;
		}
		return	array_keys( $_SESSION['FILE'] );
	}
	/**
	 * セッションに保存されたファイルを削除する。
	 *
	 * @param string $key セッションキー
	 * @return bool 常に `true` を返します。
	 */
	public function delete_uploadfile( $key ){
		if( @!array_key_exists('FILE', $_SESSION) ){
			return true;
		}
		unset( $_SESSION['FILE'][$key] );
		return	true;
	}
	/**
	 * セッションに保存されたファイルを全て削除する。
	 *
	 * @return bool 常に `true` を返します。
	 */
	public function delete_uploadfile_all(){
		return	$this->delete_session( 'FILE' );
	}


	// ----- utils -----

	/**
	 * USER_AGENT を取得する。
	 *
	 * @return string USER_AGENT
	 */
	public function get_user_agent(){
		return @$this->conf->server['HTTP_USER_AGENT'];
	}//get_user_agent()

	/**
	 *  SSL通信か調べる
	 *
	 * @return bool SSL通信の場合 `true`、それ以外の場合 `false` を返します。
	 */
	public function is_ssl(){
		if( @$this->conf->server['HTTP_SSL'] || @$this->conf->server['HTTPS'] ){
			// SSL通信が有効か否か判断
			return true;
		}
		return false;
	}

	/**
	 * コマンドラインによる実行か確認する。
	 *
	 * @return bool コマンドからの実行の場合 `true`、ウェブからの実行の場合 `false` を返します。
	 */
	public function is_cmd(){
		if( array_key_exists( 'REMOTE_ADDR' , $this->conf->server ) ){
			return false;
		}
		return	true;
	}


	// ----- private -----

	/**
	 * 受け取ったテキストを、指定の文字セットに変換する。
	 *
	 * @param mixed $text テキスト
	 * @param string $encode 変換後の文字セット。省略時、`mb_internal_encoding()` から取得
	 * @param string $encodefrom 変換前の文字セット。省略時、自動検出
	 * @return string 文字セット変換後のテキスト
	 */
	private static function convert_encoding( $text, $encode = null, $encodefrom = null ){
		if( !is_callable( 'mb_internal_encoding' ) ){ return $text; }
		if( !strlen( $encodefrom ) ){ $encodefrom = mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP,JIS,ASCII'; }
		if( !strlen( $encode ) ){ $encode = mb_internal_encoding(); }

		if( is_array( $text ) ){
			$rtn = array();
			if( !count( $text ) ){ return $text; }
			$TEXT_KEYS = array_keys( $text );
			foreach( $TEXT_KEYS as $Line ){
				$KEY = mb_convert_encoding( $Line , $encode , $encodefrom );
				if( is_array( $text[$Line] ) ){
					$rtn[$KEY] = self::convert_encoding( $text[$Line] , $encode , $encodefrom );
				}else{
					$rtn[$KEY] = @mb_convert_encoding( $text[$Line] , $encode , $encodefrom );
				}
			}
		}else{
			if( !strlen( $text ) ){ return $text; }
			$rtn = @mb_convert_encoding( $text , $encode , $encodefrom );
		}
		return $rtn;
	}

	/**
	 * クォートされた文字列のクォート部分を取り除く。
	 *
	 * この関数は、PHPの `stripslashes()` のラッパーです。
	 * 配列を受け取ると再帰的に文字列を変換して返します。
	 *
	 * @param mixed $text テキスト
	 * @return string クォートが元に戻されたテキスト
	 */
	private static function stripslashes( $text ){
		if( is_array( $text ) ){
			// 配列なら
			foreach( $text as $key=>$val ){
				$text[$key] = self::stripslashes( $val );
			}
		}elseif( is_string( $text ) ){
			// 文字列なら
			$text = stripslashes( $text );
		}
		return	$text;
	}

	/**
	 * カレントディレクトリのパスを取得
	 * @return string ドキュメントルートからのパス(スラッシュ閉じ)
	 */
	private function get_path_current_dir(){
		//  環境変数から自動的に判断。
		$rtn = dirname( $this->conf->server['SCRIPT_NAME'] );
		if( !array_key_exists( 'REMOTE_ADDR' , $this->conf->server ) ){
			//  CUIから起動された場合
			//  ドキュメントルートが判定できないので、
			//  ドキュメントルート直下にあるものとする。
			$rtn = '/';
		}
		$rtn = str_replace('\\','/',$rtn);
		$rtn .= ($rtn!='/'?'/':'');
		return $rtn;
	}//get_path_current_dir()

}
?><?php
namespace renconFramework;

/**
 * user class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class user{
	private $rencon;

	/**
	 * Constructor
	 */
	public function __construct( $rencon ){
		$this->rencon = $rencon;
	}

	/**
	 * ログインしているか
	 */
	public function is_login(){
		$login_id = $this->get_user_id();
		return !!strlen($login_id);
	}

	/**
	 * ユーザーIDを取得
	 */
	public function get_user_id(){
		$login_id = $this->rencon->req()->get_session($this->rencon->app_id().'_ses_login_id');
		return $login_id;
	}

}
?><?php
namespace renconFramework;

/**
 * theme class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class theme{
	private $rencon;
	private $app_info;
	private $current_page_info;

	/**
	 * Constructor
	 */
	public function __construct( $rencon, $app_info, $current_page_info = array() ){
		$this->rencon = $rencon;
		$this->app_info = (object) $app_info;
		$this->current_page_info = (object) $current_page_info;
	}

	/**
	 * ページ情報
	 */
	public function set_current_page_info( $page_info ){
		$this->current_page_info = (object) array_merge((array) $this->current_page_info, (array) $page_info);
		return true;
	}

	/**
	 * アプリケーション情報を取得
	 */
	public function app_info(){
		return $this->app_info;
	}

	/**
	 * ページ情報を取得
	 */
	public function get_current_page_info(){
		return $this->current_page_info;
	}

	/**
	 * テーマにコンテンツを包んで返す
	 */
	public function bind( $content ){
		$action_ary = explode('.', $this->rencon->req()->get_param('a'));
		if( !is_array($action_ary) || !count($action_ary) ){
			$action_ary[0] = '';
		}
		$class_active['active'] = $action_ary[0];
		$rencon = $this->rencon;

		ob_start();
		?><?php
$app_info = $this->app_info();
$current_page_info = $this->get_current_page_info();
?>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title><?= htmlspecialchars( $app_info->name ) ?> | <?= htmlspecialchars( $current_page_info->title ) ?></title>
<link rel="stylesheet" href="?res=theme.css" />
</head>
<body>

<p><a href="?a="><?= htmlspecialchars( $app_info->name ) ?></a></p>

<ul><?php
foreach( $app_info->pages as $pid=>$page_info ){
    echo '<li><a href="?a='.htmlspecialchars($pid).'">'.htmlspecialchars($page_info->title).'</a></li>'."\n";
}

?></ul>

<hr />
<div class="theme-middle">
<h1><?= nl2br( htmlspecialchars( $current_page_info->title ) ) ?></h1>
<div class="contents">
<?= $content ?>
</div>
</div>

<hr />

<?php if( $rencon->conf()->is_login_required() && $rencon->user()->is_login() ) { ?>
<p>
    <a href="?a=logout">Logout</a>
</p>
<?php } ?>

<script src="?res=theme.js"></script>
</body>
</html>
<?php
		$rtn = ob_get_clean();

		return $rtn;
	}
}
?><?php
namespace renconFramework;

/**
 * login class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class login{
	private $rencon;
	private $app_info;

	/**
	 * Constructor
	 */
	public function __construct( $rencon, $app_info ){
		$this->rencon = $rencon;
		$this->app_info = (object) $app_info;
	}

	/**
	 * ログインしているか調べる
	 */
	public function check(){

		if( !$this->rencon->conf()->is_login_required() ){
			// ユーザーが設定されていなければ、ログインの評価を行わない。
			return true;
		}

		$users = (array) $this->rencon->conf()->users;
		$ses_id = $this->rencon->app_id().'_ses_login_id';
		$ses_pw = $this->rencon->app_id().'_ses_login_pw';

		$login_id = $this->rencon->req()->get_param('login_id');
		$login_pw = $this->rencon->req()->get_param('login_pw');
		$login_try = $this->rencon->req()->get_param('login_try');
		if( strlen( $login_try ) && strlen($login_id) && strlen($login_pw) ){
			// ログイン評価
			if( array_key_exists($login_id, $users) && $users[$login_id] == sha1($login_pw) ){
				$this->rencon->req()->set_session($ses_id, $login_id);
				$this->rencon->req()->set_session($ses_pw, sha1($login_pw));
				header('Location: ?a='.urlencode($this->rencon->req()->get_param('a')));
				return true;
			}
		}


		$login_id = $this->rencon->req()->get_session($ses_id);
		$login_pw_hash = $this->rencon->req()->get_session($ses_pw);
		if( strlen($login_id) && strlen($login_pw_hash) ){
			// ログイン済みか評価
			if( array_key_exists($login_id, $users) && $users[$login_id] == $login_pw_hash ){
				return true;
			}
			$this->rencon->req()->delete_session($ses_id);
			$this->rencon->req()->delete_session($ses_pw);
			$this->rencon->forbidden();
			exit;
		}

		return false;
	}

	/**
	 * ログイン画面を表示して終了する
	 */
	public function please_login(){
		header('Content-type: text/html');



		ob_start();
		?>
<!doctype html>
<html>
	<head>
		<meta charset="UTF-8" />
		<title><?= htmlspecialchars( $this->app_info->name ) ?></title>
		<meta name="robots" content="nofollow, noindex, noarchive" />
		<?= $this->mk_css() ?>
	</head>
	<body>
		<div class="theme-container">
			<h1><?= htmlspecialchars( $this->app_info->name ) ?></h1>
			<?php if( strlen($this->rencon->req()->get_param('login_try')) ){ ?>
				<div class="alert alert-danger" role="alert">
					<div>IDまたはパスワードが違います。</div>
				</div>
			<?php } ?>

			<form action="?" method="post">
<table>
	<tr><th>ID:</th><td><input type="text" name="login_id" value="" /></td>
	<tr><th>Password:</th><td><input type="password" name="login_pw" value="" /></td>
</table>
<p><button type="submit">Login</button></p>
<input type="hidden" name="login_try" value="1" />
<input type="hidden" name="a" value="<?= htmlspecialchars($this->rencon->req()->get_param('a')) ?>" />
			</form>
		</div>
	</body>
</html>
<?php
		$rtn = ob_get_clean();
		print $rtn;
		exit;
	}

	/**
	 * ログアウトして終了する
	 */
	public function logout(){
		$this->rencon->req()->delete_session($this->rencon->app_id().'_ses_login_id');
		$this->rencon->req()->delete_session($this->rencon->app_id().'_ses_login_pw');



		header('Content-type: text/html');
		ob_start();
		?>
<!doctype html>
<html>
	<head>
		<meta charset="UTF-8" />
		<title><?= htmlspecialchars( $this->app_info->name ) ?></title>
		<meta name="robots" content="nofollow, noindex, noarchive" />
		<?= $this->mk_css() ?>
	</head>
	<body>
		<div class="theme-container">
			<h1><?= htmlspecialchars( $this->app_info->name ) ?></h1>
			<p>Logged out.</p>
			<p><a href="?">Back to Home</a></p>
		</div>
	</body>
</html>
<?php
		$rtn = ob_get_clean();
		print $rtn;
		exit;
	}


	/**
	 * CSSを生成
	 */
	private function mk_css(){
		ob_start();?>
		<style>
			html, body {
				background-color: #e7e7e7;
				color: #333;
				font-size: 16px;
				margin: 0;
				padding: 0;
			}
			.theme-container {
				box-sizing: border-box;
				text-align: center;
				padding: 4em 20px;
				margin: 30px auto;
				width: calc(100% - 20px);
				max-width: 600px;
				background-color: #f6f6f6;
				border: 1px solid #bbb;
				border-radius: 5px;
				box-shadow: 0 2px 12px rgba(0,0,0,0.1);
			}
			h1 {
				font-size: 22px;
			}
			table{
				margin: 0 auto;
				max-width: 100%;
			}
			th {
				text-align: right;
				padding: 3px;
			}
			td {
				text-align: left;
				padding: 3px;
			}
			input[type=text],
			input[type=password]{
				display: inline-block;
				box-sizing: border-box;
				width: 160px;
				min-width: 50px;
				max-width: 100%;
				padding: .375rem .75rem;
				font-size: 1em;
				font-weight: normal;
				line-height: 1.5;
				color: #333;
				background-color: #f6f6f6;
				background-clip: padding-box;
				border: 1px solid #ced4da;
				border-radius: .25rem;
				transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
			}
			input[type=text]:focus,
			input[type=password]:focus{
				color: #333;
				background-color: #fff;
				border-color: #80bdff;
				outline: 0;
				box-shadow: 0 0 0 .2rem rgba(0,123,255,.25);
			}

			button {
				display: inline-block;
				border-radius: 3px;
				background-color: #f5fbfe;
				color: #00a0e6;
				border: 1px solid #00a0e6;
				box-shadow: 0 2px 0px rgba(0,0,0,0.1);
				padding: 0.5em 2em;
				font-size:1em;
				font-weight: normal;
				line-height: 1;
				text-decoration: none;
				text-align: center;
				cursor: pointer;
				box-sizing: border-box;
				align-items: stretch;
				transition:
					color 0.1s,
					background-color 0.1s,
					transform 0.1s
				;
			}
			button:focus,
			button:hover{
				background-color: #d9f1fb;
			}
			button:hover{
				background-color: #ccecfa;
			}
			button:active{
				background-color: #00a0e6;
				color: #fff;
			}

		</style>

		<?php
		$src = ob_get_clean();
		return $src;
	}

}
?><?php
namespace tomk79\onionSlice\middleware;

class setup {

	/**
	 * セットアップを進行する
	 */
	public function setup_wizard( $rencon ){
		$setup = new \tomk79\onionSlice\setup( $rencon );
		if( !$setup->wizard() ){
			return;
		}
		return;
	}

}
?><?php
namespace tomk79\onionSlice;

class setup {
	private $rencon;


	/**
	 * Constructor
	 */
	public function __construct( $rencon ){
		$this->rencon = $rencon;
	}


	/**
	 * セットアップを進行する
	 */
	public function wizard(){
		$conf = $this->rencon->conf();

		if( !$this->rencon->fs()->is_dir($this->rencon->conf()->path_data_dir) ||
			!$this->rencon->fs()->is_dir($this->rencon->conf()->path_data_dir.'/project/') ||
			!$this->rencon->fs()->is_file($this->rencon->conf()->path_data_dir.'/commands/composer/composer.phar') ){
			ob_start();
			$this->step01();
			$html = ob_get_clean();
			echo $this->rencon->theme()->bind( $html );
			exit();
		}


		if( !$this->rencon->fs()->is_file($this->rencon->conf()->path_data_dir.'/project/composer.json') ){
			ob_start();
			$this->step02();
			$html = ob_get_clean();
			echo $this->rencon->theme()->bind( $html );
			exit();
		}

		$path_entry_script = $this->get_entry_script();

		$px2agent = new \picklesFramework2\px2agent\px2agent();
		$px2proj = $px2agent->createProject( $this->rencon->conf()->path_data_dir.'/project/'.$path_entry_script );


		if( !$this->rencon->fs()->is_dir($this->rencon->conf()->path_data_dir.'/project/.git/') ){
			ob_start();
			$this->step03();
			$html = ob_get_clean();
			echo $this->rencon->theme()->bind( $html );
			exit();
		}


		return true;
	}


	/**
	 * entryScriptのパスを調べる
	 */
	private function get_entry_script(){
		if( !$this->rencon->fs()->is_file($this->rencon->conf()->path_data_dir.'/project/composer.json') ){
			return false;
		}

		$path_entry_script = '.px_execute.php';

		$src_composer_json = $this->rencon->fs()->read_file( $this->rencon->conf()->path_data_dir.'/project/composer.json' );
		$composer_json = json_decode( $src_composer_json );

		if( !isset( $composer_json->extra->px2package ) ){
			return $path_entry_script;
		}

		if( is_object($composer_json->extra->px2package) && isset($composer_json->extra->px2package->path) ){
			$path_entry_script = $composer_json->extra->px2package->path;
		}elseif( is_array($composer_json->extra->px2package) ){
			foreach( $composer_json->extra->px2package as $row ){
				if( is_object($row) && isset($row->path) ){
					if( isset($row->type) && $row->type != 'project' ){
						continue;
					}
					$path_entry_script = $row->path;
					break;
				}
			}
		}

		return $path_entry_script;
	}

	/**
	 * reload
	 */
	private function reload(){
		header('Location: ?a='.urlencode($this->rencon->req()->get_param('a')));
		return;
	}



	/**
	 * ステップ1: データディレクトリを作成する
	 */
	private function step01(){
		if( $this->rencon->req()->get_param('cmd') == 'next' ){
			if( !$this->rencon->fs()->mkdir($this->rencon->conf()->path_data_dir) ){
				?>
				<p>ディレクトリの作成に失敗しました。</p>
				<?php
				return;
			}
			if( !$this->rencon->fs()->mkdir($this->rencon->conf()->path_data_dir.'/project/') ){
				?>
				<p>ディレクトリの作成に失敗しました。</p>
				<?php
				return;
			}
			if( !$this->rencon->fs()->mkdir_r($this->rencon->conf()->path_data_dir.'/commands/composer/') ){
				?>
				<p>ディレクトリの作成に失敗しました。</p>
				<?php
				return;
			}
			$bin = $this->rencon->resources()->get('resources/composer.phar');
			$this->rencon->fs()->save_file( $this->rencon->conf()->path_data_dir.'/commands/composer/composer.phar', $bin );
			$this->reload();
			return;
		}
		?>
			<p>データディレクトリを作成します。</p>
			<form action="?" method="post">
				<input type="hidden" name="a" value="<?= $this->rencon->req()->get_param('a') ?>" />
				<input type="hidden" name="cmd" value="next" />
				<button type="submit">次へ</button>
			</form>
		<?php
		return;
	}

	/**
	 * ステップ2: プロジェクトをセットアップ
	 */
	private function step02(){
		if( $this->rencon->req()->get_param('cmd') == 'next' ){
			$path_composer = realpath($this->rencon->conf()->path_data_dir.'/commands/composer/composer.phar');
			$base_dir = $this->rencon->conf()->path_data_dir.'/project/';
			$current_dir = realpath('.');
			chdir($base_dir);

			exec($this->rencon->conf()->commands->php.' '.$path_composer.' create-project pickles2/preset-get-start-pickles2 ./');

			chdir($current_dir);
			$this->reload();
			return;
		}
		?>
			<p>プロジェクトをセットアップします。</p>
			<form action="?" method="post">
				<input type="hidden" name="a" value="<?= $this->rencon->req()->get_param('a') ?>" />
				<input type="hidden" name="cmd" value="next" />
				<button type="submit">次へ</button>
			</form>
		<?php
		return;
	}

	/**
	 * ステップ3: Gitを初期化します
	 */
	private function step03(){
		if( $this->rencon->req()->get_param('cmd') == 'next' ){
			$path_composer = realpath($this->rencon->conf()->path_data_dir.'/commands/composer/composer.phar');
			$base_dir = $this->rencon->conf()->path_data_dir.'/project/';
			$current_dir = realpath('.');
			chdir($base_dir);

			exec($this->rencon->conf()->commands->git.' init');
			exec($this->rencon->conf()->commands->git.' add ./');
			exec($this->rencon->conf()->commands->git.' commit -m "Initial commit."');

			chdir($current_dir);
			$this->reload();
			return;
		}
		?>
			<p>Gitを初期化します。</p>
			<form action="?" method="post">
				<input type="hidden" name="a" value="<?= $this->rencon->req()->get_param('a') ?>" />
				<input type="hidden" name="cmd" value="next" />
				<button type="submit">次へ</button>
			</form>
		<?php
		return;
	}

}
?><?php

namespace tomk79\onionSlice;

class test {
    static public function start(){
        echo "test::start()"."\n";
        return;
    }
}
?><?php
/**
 * tomk79/filesystem
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */

namespace tomk79;

/**
 * tomk79/filesystem core class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class filesystem{

	/**
	 * ファイルおよびディレクトリ操作時のデフォルトパーミッション
	 */
	private $default_permission = array('dir'=>0775,'file'=>0775);
	/**
	 * ファイルシステムの文字セット
	 */
	private $filesystem_encoding = null;

	/**
	 * コンストラクタ
	 *
	 * @param object $conf 設定オブジェクト
	 */
	public function __construct($conf=null){
		$conf = json_decode( json_encode($conf), true );
		if(!is_array($conf)){
			$conf = array();
		}
		if( array_key_exists('file_default_permission', $conf) && strlen( $conf['file_default_permission'] ) ){
			$this->default_permission['file'] = octdec( $conf['file_default_permission'] );
		}
		if( array_key_exists('dir_default_permission', $conf) && strlen( $conf['dir_default_permission'] ) ){
			$this->default_permission['dir'] = octdec( $conf['dir_default_permission'] );
		}
		if( array_key_exists('filesystem_encoding', $conf) && strlen( $conf['filesystem_encoding'] ) ){
			$this->filesystem_encoding = trim( $conf['filesystem_encoding'] );
		}
	}

	/**
	 * 書き込み/上書きしてよいアイテムか検証する。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool 書き込み可能な場合 `true`、不可能な場合に `false` を返します。
	 */
	public function is_writable( $path ){
		$path = $this->localize_path($path);
		if( !$this->is_file($path) ){
			return is_writable( dirname($path) );
		}
		return is_writable( $path );
	} // is_writable()

	/**
	 * 読み込んでよいアイテムか検証する。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool 読み込み可能な場合 `true`、不可能な場合に `false` を返します。
	 */
	public function is_readable( $path ){
		$path = $this->localize_path($path);
		return is_readable( $path );
	}//is_readable()

	/**
	 * ファイルが存在するかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ファイルが存在する場合 `true`、存在しない場合、またはディレクトリが存在する場合に `false` を返します。
	 */
	public function is_file( $path ){
		$path = $this->localize_path($path);
		return is_file( $path );
	}//is_file()

	/**
	 * シンボリックリンクかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ファイルがシンボリックリンクの場合 `true`、存在しない場合、それ以外の場合に `false` を返します。
	 */
	public function is_link( $path ){
		$path = $this->localize_path($path);
		return is_link( $path );
	}//is_link()

	/**
	 * ディレクトリが存在するかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ディレクトリが存在する場合 `true`、存在しない場合、またはファイルが存在する場合に `false` を返します。
	 */
	public function is_dir( $path ){
		$path = $this->localize_path($path);
		return is_dir( $path );
	}//is_dir()

	/**
	 * ファイルまたはディレクトリが存在するかどうか調べる。
	 *
	 * @param string $path 検証対象のパス
	 * @return bool ファイルまたはディレクトリが存在する場合 `true`、存在しない場合に `false` を返します。
	 */
	public function file_exists( $path ){
		$path = $this->localize_path($path);
		return file_exists( $path );
	} // file_exists()

	/**
	 * ディレクトリを作成する。
	 *
	 * @param string $dirpath 作成するディレクトリのパス
	 * @param int $perm 作成するディレクトリに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function mkdir( $dirpath , $perm = null ){
		$dirpath = $this->localize_path($dirpath);

		if( $this->is_dir( $dirpath ) ){
			// 既にディレクトリがあったら、作成を試みない。
			$this->chmod( $dirpath , $perm );
			return true;
		}
		$result = @mkdir( $dirpath );
		$this->chmod( $dirpath , $perm );
		clearstatcache();
		return	$result;
	}//mkdir()

	/**
	 * ディレクトリを作成する(上層ディレクトリも全て作成)
	 *
	 * @param string $dirpath 作成するディレクトリのパス
	 * @param int $perm 作成するディレクトリに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function mkdir_r( $dirpath , $perm = null ){
		$dirpath = $this->localize_path($dirpath);
		if( $this->is_dir( $dirpath ) ){
			return true;
		}
		if( $this->is_file( $dirpath ) ){
			return false;
		}
		$patharray = explode( DIRECTORY_SEPARATOR , $this->localize_path( $this->get_realpath($dirpath) ) );
		$targetpath = '';
		foreach( $patharray as $idx=>$Line ){
			if( !strlen( $Line ) || $Line == '.' || $Line == '..' ){ continue; }
			if(!($idx===0 && DIRECTORY_SEPARATOR == '\\' && preg_match('/^[a-zA-Z]\:$/s', $Line))){
				$targetpath .= DIRECTORY_SEPARATOR;
			}
			$targetpath .= $Line;

			// clearstatcache();
			if( !$this->is_dir( $targetpath ) ){
				$targetpath = $this->localize_path( $targetpath );
				if( !$this->mkdir( $targetpath , $perm ) ){
					return false;
				}
			}
		}
		return true;
	}//mkdir_r()

	/**
	 * ファイルやディレクトリを中身ごと完全に削除する。
	 *
	 * このメソッドは、ファイルやシンボリックリンクも削除します。
	 * ディレクトリを削除する場合は、中身ごと完全に削除します。
	 * シンボリックリンクは、その先を追わず、シンボリックリンク本体のみを削除します。
	 *
	 * @param string $path 対象のパス
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function rm( $path ){
		$path = $this->localize_path($path);
		clearstatcache();

		if( !$this->is_writable( $path ) ){
			return false;
		}
		if( $this->is_file( $path ) || $this->is_link( $path ) ){
			// ファイルまたはシンボリックリンクの場合の処理
			$result = unlink( $path );
			return	$result;

		}elseif( $this->is_dir( $path ) ){
			// ディレクトリの処理
			$flist = $this->ls( $path );
			if( is_array($flist) ){
				foreach ( $flist as $Line ){
					if( $Line == '.' || $Line == '..' ){ continue; }
					$this->rm( $path.DIRECTORY_SEPARATOR.$Line );
				}
			}
			$result = rmdir( $path );
			return	$result;

		}

		return false;
	}//rm()

	/**
	 * ディレクトリを削除する。
	 *
	 * このメソッドはディレクトリを削除します。
	 * 中身のない、空のディレクトリ以外は削除できません。
	 *
	 * @param string $path 対象ディレクトリのパス
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function rmdir( $path ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){
			return false;
		}
		$path = @realpath( $path );
		if( $path === false ){
			return false;
		}
		if( $this->is_file( $path ) || $this->is_link( $path ) ){
			// ファイルまたはシンボリックリンクの場合の処理
			// ディレクトリ以外は削除できません。
			return false;

		}elseif( $this->is_dir( $path ) ){
			// ディレクトリの処理
			// rmdir() は再帰的削除を行いません。
			// 再帰的に削除したい場合は、代わりに `rm()` または `rmdir_r()` を使用します。
			return @rmdir( $path );
		}

		return false;
	}//rmdir()

	/**
	 * ディレクトリを再帰的に削除する。
	 *
	 * このメソッドはディレクトリを再帰的に削除します。
	 * 中身のない、空のディレクトリ以外は削除できません。
	 *
	 * @param string $path 対象ディレクトリのパス
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function rmdir_r( $path ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){
			return false;
		}
		$path = @realpath( $path );
		if( $path === false ){
			return false;
		}
		if( $this->is_file( $path ) || $this->is_link( $path ) ){
			// ファイルまたはシンボリックリンクの場合の処理
			// ディレクトリ以外は削除できません。
			return false;

		}elseif( $this->is_dir( $path ) ){
			// ディレクトリの処理
			$filelist = $this->ls($path);
			if( is_array($filelist) ){
				foreach( $filelist as $basename ){
					if( $this->is_file( $path.DIRECTORY_SEPARATOR.$basename ) ){
						$this->rm( $path.DIRECTORY_SEPARATOR.$basename );
					}else if( !$this->rmdir_r( $path.DIRECTORY_SEPARATOR.$basename ) ){
						return false;
					}
				}
			}
			return $this->rmdir( $path );
		}

		return false;
	}//rmdir_r()


	/**
	 * ファイルを上書き保存する。
	 *
	 * このメソッドは、`$filepath` にデータを保存します。
	 * もともと保存されていた内容は破棄され、新しいデータで上書きします。
	 *
	 * @param string $filepath 保存先ファイルのパス
	 * @param string $content 保存する内容
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function save_file( $filepath , $content , $perm = null ){
		$filepath = $this->get_realpath($filepath);
		$filepath = $this->localize_path($filepath);

		if( $this->is_dir( $filepath ) ){
			return false;
		}
		if( !$this->is_writable( $filepath ) ){
			return false;
		}

		if( !strlen( $content ) ){
			// 空白のファイルで上書きしたい場合
			if( $this->is_file( $filepath ) ){
				@unlink( $filepath );
			}
			@touch( $filepath );
			$this->chmod( $filepath , $perm );
			clearstatcache();
			return $this->is_file( $filepath );
		}

		clearstatcache();
		$fp = fopen( $filepath, 'w' );
		if( !is_resource( $fp ) ){
			return false;
		}

		for ($written = 0; $written < strlen($content); $written += $fwrite) {
			$fwrite = fwrite($fp, substr($content, $written));
			if ($fwrite === false) {
				break;
			}
		}

		fclose($fp);

		$this->chmod( $filepath , $perm );
		clearstatcache();
		return !empty( $written );
	}//save_file()

	/**
	 * ファイルの中身を文字列として取得する。
	 *
	 * @param string $path ファイルのパス
	 * @return string ファイル `$path` の内容
	 */
	public function read_file( $path ){
		$path = $this->localize_path($path);
		return file_get_contents( $path );
	}//file_get_contents()

	/**
	 * ファイルの更新日時を比較する。
	 *
	 * @param string $path_a 比較対象A
	 * @param string $path_b 比較対象B
	 * @return bool|null
	 * `$path_a` の方が新しかった場合に `true`、
	 * `$path_b` の方が新しかった場合に `false`、
	 * 同時だった場合に `null` を返します。
	 *
	 * いずれか一方、または両方のファイルが存在しない場合、次のように振る舞います。
	 * - 両方のファイルが存在しない場合 = `null`
	 * - $path_a が存在せず、$path_b は存在する場合 = `false`
	 * - $path_a が存在し、$path_b は存在しない場合 = `true`
	 */
	public function is_newer_a_than_b( $path_a , $path_b ){
		$path_a = $this->localize_path($path_a);
		$path_b = $this->localize_path($path_b);

		// 比較できない場合に
		if(!file_exists($path_a) && !file_exists($path_b)){return null;}
		if(!file_exists($path_a)){return false;}
		if(!file_exists($path_b)){return true;}

		$mtime_a = filemtime( $path_a );
		$mtime_b = filemtime( $path_b );
		if( $mtime_a > $mtime_b ){
			return true;
		}elseif( $mtime_a < $mtime_b ){
			return false;
		}
		return null;
	}//is_newer_a_than_b()

	/**
	 * ファイル名/ディレクトリ名を変更する。
	 *
	 * @param string $original 現在のファイルまたはディレクトリ名
	 * @param string $newname 変更後のファイルまたはディレクトリ名
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function rename( $original , $newname ){
		$original = $this->localize_path($original);
		$newname  = $this->localize_path($newname );

		if( !file_exists( $original ) ){ return false; }
		if( !$this->is_writable( $original ) ){ return false; }
		return rename( $original , $newname );
	}//rename()

	/**
	 * ファイル名/ディレクトリ名を強制的に変更する。
	 *
	 * 移動先の親ディレクトリが存在しない場合にも、親ディレクトリを作成して移動するよう試みます。
	 *
	 * @param string $original 現在のファイルまたはディレクトリ名
	 * @param string $newname 変更後のファイルまたはディレクトリ名
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function rename_f( $original , $newname ){
		$original = $this->localize_path($original);
		$newname  = $this->localize_path($newname );

		if( !file_exists( $original ) ){ return false; }
		if( !$this->is_writable( $original ) ){ return false; }
		$dirname = dirname( $newname );
		if( !$this->is_dir( $dirname ) ){
			if( !$this->mkdir_r( $dirname ) ){
				return false;
			}
		}
		return rename( $original , $newname );
	} // rename_f()

	/**
	 * 絶対パスを得る。
	 *
	 * パス情報を受け取り、スラッシュから始まるサーバー内部絶対パスに変換して返します。
	 *
	 * このメソッドは、PHPの `realpath()` と異なり、存在しないパスも絶対パスに変換します。
	 *
	 * @param string $path 対象のパス
	 * @param string $cd カレントディレクトリパス。
	 * 実在する有効なディレクトリのパス、または絶対パスの表現で指定される必要があります。
	 * 省略時、カレントディレクトリを自動採用します。
	 * @return string 絶対パス
	 */
	public function get_realpath( $path, $cd = '.' ){
		$is_dir = false;
		if( preg_match( '/(\/|\\\\)+$/s', $path ) ){
			$is_dir = true;
		}
		$path = $this->localize_path($path);
		if( is_null($cd) ){ $cd = '.'; }
		$cd = $this->localize_path($cd);
		$preg_dirsep = preg_quote(DIRECTORY_SEPARATOR, '/');

		if( $this->is_dir($cd) ){
			$cd = realpath($cd);
		}elseif( !preg_match('/^((?:[A-Za-z]\\:'.$preg_dirsep.')|'.$preg_dirsep.'{1,2})(.*?)$/', $cd) ){
			$cd = false;
		}
		if( $cd === false ){
			return false;
		}

		$prefix = '';
		$localpath = $path;
		if( preg_match('/^((?:[A-Za-z]\\:'.$preg_dirsep.')|'.$preg_dirsep.'{1,2})(.*?)$/', $path, $matched) ){
			// もともと絶対パスの指定か調べる
			$prefix = preg_replace('/'.$preg_dirsep.'$/', '', $matched[1]);
			$localpath = $matched[2];
			$cd = null; // 元の指定が絶対パスだったら、カレントディレクトリは関係ないので捨てる。
		}

		$path = $cd.DIRECTORY_SEPARATOR.'.'.DIRECTORY_SEPARATOR.$localpath;

		if( file_exists( $prefix.$path ) ){
			$rtn = realpath( $prefix.$path );
			if( $is_dir && $rtn != realpath('/') ){
				$rtn .= DIRECTORY_SEPARATOR;
			}
			return $rtn;
		}

		$paths = explode( DIRECTORY_SEPARATOR, $path );
		$path = '';
		foreach( $paths as $idx=>$row ){
			if( $row == '' || $row == '.' ){
				continue;
			}
			if( $row == '..' ){
				$path = dirname($path);
				if($path == DIRECTORY_SEPARATOR){
					$path = '';
				}
				continue;
			}
			if(!($idx===0 && DIRECTORY_SEPARATOR == '\\' && preg_match('/^[a-zA-Z]\:$/s', $row))){
				$path .= DIRECTORY_SEPARATOR;
			}
			$path .= $row;
		}

		$rtn = $prefix.$path;
		if( $is_dir ){
			$rtn .= DIRECTORY_SEPARATOR;
		}
		return $rtn;
	}

	/**
	 * 相対パスを得る。
	 *
	 * パス情報を受け取り、ドットスラッシュから始まる相対絶対パスに変換して返します。
	 *
	 * @param string $path 対象のパス
	 * @param string $cd カレントディレクトリパス。
	 * 実在する有効なディレクトリのパス、または絶対パスの表現で指定される必要があります。
	 * 省略時、カレントディレクトリを自動採用します。
	 * @return string 相対パス
	 */
	public function get_relatedpath( $path, $cd = '.' ){
		$is_dir = false;
		if( preg_match( '/(\/|\\\\)+$/s', $path ) ){
			$is_dir = true;
		}
		if( !strlen( $cd ) ){
			$cd = realpath('.');
		}elseif( $this->is_dir($cd) ){
			$cd = realpath($cd);
		}elseif( $this->is_file($cd) ){
			$cd = realpath(dirname($cd));
		}
		$path = $this->get_realpath($path, $cd);

		$normalize = function( $tmp_path, $fs ){
			$tmp_path = $fs->localize_path( $tmp_path );
			$preg_dirsep = preg_quote(DIRECTORY_SEPARATOR, '/');
			if( DIRECTORY_SEPARATOR == '\\' ){
				$tmp_path = preg_replace( '/^[a-zA-Z]\:/s', '', $tmp_path );
			}
			$tmp_path = preg_replace( '/^('.$preg_dirsep.')+/s', '', $tmp_path );
			$tmp_path = preg_replace( '/('.$preg_dirsep.')+$/s', '', $tmp_path );
			if( strlen($tmp_path) ){
				$tmp_path = explode( DIRECTORY_SEPARATOR, $tmp_path );
			}else{
				$tmp_path = array();
			}

			return $tmp_path;
		};

		$cd = $normalize($cd, $this);
		$path = $normalize($path, $this);

		$rtn = array();
		while( 1 ){
			if( !count($cd) || !count($path) ){
				break;
			}
			if( $cd[0] === $path[0] ){
				array_shift( $cd );
				array_shift( $path );
				continue;
			}
			break;
		}
		if( count($cd) ){
			foreach($cd as $dirname){
				array_push( $rtn, '..' );
			}
		}else{
			array_push( $rtn, '.' );
		}
		$rtn = array_merge( $rtn, $path );
		$rtn = implode( DIRECTORY_SEPARATOR, $rtn );

		if( $is_dir ){
			$rtn .= DIRECTORY_SEPARATOR;
		}
		return $rtn;
	}

	/**
	 * パス情報を得る。
	 *
	 * @param string $path 対象のパス
	 * @return array パス情報
	 */
	public function pathinfo( $path ){
		if(strpos($path,'#')!==false){ list($path, $hash) = explode( '#', $path, 2 ); }
		if(strpos($path,'?')!==false){ list($path, $query) = explode( '?', $path, 2 ); }

		$pathinfo = pathinfo( $path );
		$pathinfo['filename'] = $this->trim_extension( $pathinfo['basename'] );
		$pathinfo['extension'] = $this->get_extension( $pathinfo['basename'] );
		$pathinfo['query'] = (isset($query)&&strlen($query) ? '?'.$query : null);
		$pathinfo['hash'] = (isset($hash)&&strlen($hash) ? '#'.$hash : null);
		return $pathinfo;
	}

	/**
	 * パス情報から、ファイル名を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 抜き出されたファイル名
	 */
	public function get_basename( $path ){
		$path = pathinfo( $path , PATHINFO_BASENAME );
		if( !strlen($path) ){$path = null;}
		return $path;
	}

	/**
	 * パス情報から、拡張子を除いたファイル名を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 拡張子が除かれたパス
	 */
	public function trim_extension( $path ){
		$pathinfo = pathinfo( $path );
		if( !array_key_exists('extension', $pathinfo) ){
			$pathinfo['extension'] = '';
		}
		$RTN = preg_replace( '/\.'.preg_quote( $pathinfo['extension'], '/' ).'$/' , '' , $path );
		return $RTN;
	}

	/**
	 * ファイル名を含むパス情報から、ファイルが格納されているディレクトリ名を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 親ディレクトリのパス
	 */
	public function get_dirpath( $path ){
		$path = pathinfo( $path , PATHINFO_DIRNAME );
		if( !strlen($path) ){$path = null;}
		return $path;
	}

	/**
	 * パス情報から、拡張子を取得する。
	 *
	 * @param string $path 対象のパス
	 * @return string 拡張子
	 */
	public function get_extension( $path ){
		$path = preg_replace('/\#.*$/si', '', $path);
		$path = preg_replace('/\?.*$/si', '', $path);
		$path = pathinfo( $path , PATHINFO_EXTENSION );
		if(!strlen($path)){$path = null;}
		return $path;
	}


	/**
	 * CSVファイルを読み込む。
	 *
	 * @param string $path 対象のCSVファイルのパス
	 * @param array $options オプション
	 * - delimiter = 区切り文字(省略時、カンマ)
	 * - enclosure = クロージャー文字(省略時、ダブルクオート)
	 * - size = 一度に読み込むサイズ(省略時、10000)
	 * - charset = 文字セット(省略時、UTF-8)
	 * @return array|bool 読み込みに成功した場合、行列を格納した配列、失敗した場合には `false` を返します。
	 */
	public function read_csv( $path , $options = array() ){
		// $options['charset'] は、保存されているCSVファイルの文字エンコードです。
		// 省略時は UTF-8 から、内部エンコーディングに変換します。

		$path = $this->localize_path($path);

		if( !$this->is_file( $path ) ){
			// ファイルがなければfalseを返す
			return false;
		}

		// Normalize $options
		if( !is_array($options) ){
			$options = array();
		}
		if( !array_key_exists( 'charset', $options ) ){ $options['charset'] = null; }
		if( !array_key_exists( 'delimiter', $options ) ){ $options['delimiter'] = null; }
		if( !array_key_exists( 'enclosure', $options ) ){ $options['enclosure'] = null; }
		if( !array_key_exists( 'size', $options ) ){ $options['size'] = null; }
		if( !array_key_exists( 'charset', $options ) ){ $options['charset'] = null; }

		if( !strlen( @$options['delimiter'] ) )    { $options['delimiter'] = ','; }
		if( !strlen( @$options['enclosure'] ) )    { $options['enclosure'] = '"'; }
		if( !strlen( @$options['size'] ) )         { $options['size'] = 10000; }
		if( !strlen( @$options['charset'] ) )      { $options['charset'] = 'UTF-8'; }//←CSVの文字セット

		$RTN = array();
		$fp = fopen( $path, 'r' );
		if( !is_resource( $fp ) ){
			return false;
		}

		while( $SMMEMO = fgetcsv( $fp , intval( $options['size'] ) , $options['delimiter'] , $options['enclosure'] ) ){
			foreach( $SMMEMO as $key=>$row ){
				$SMMEMO[$key] = mb_convert_encoding( $row , mb_internal_encoding() , $options['charset'].',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP' );
			}
			array_push( $RTN , $SMMEMO );
		}
		fclose($fp);
		return $RTN;
	} // read_csv()

	/**
	 * 配列をCSV形式に変換する。
	 *
	 * 改行コードはLFで出力されます。
	 *
	 * @param array $array 2次元配列
	 * @param array $options オプション
	 * - charset = 文字セット(省略時、UTF-8)
	 * @return string 生成されたCSV形式のテキスト
	 */
	public function mk_csv( $array , $options = array() ){
		// $options['charset'] は、出力されるCSV形式の文字エンコードを指定します。
		// 省略時は UTF-8 に変換して返します。
		if( !is_array( $array ) ){ $array = array(); }

		// Normalize $options
		if( !is_array($options) ){
			$options = array();
		}
		if( !array_key_exists( 'charset', $options ) ){
			$options['charset'] = null;
		}
		if( !strlen( $options['charset'] ) ){
			$options['charset'] = 'UTF-8';
		}

		$RTN = '';
		foreach( $array as $Line ){
			if( is_null( $Line ) ){ continue; }
			if( !is_array( $Line ) ){ $Line = array(); }
			foreach( $Line as $cell ){
				$cell = mb_convert_encoding( $cell , $options['charset'] , mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP' );
				if( preg_match( '/"/' , $cell ) ){
					$cell = preg_replace( '/"/' , '""' , $cell);
				}
				if( strlen( $cell ) ){
					$cell = '"'.$cell.'"';
				}
				$RTN .= $cell.',';
			}
			$RTN = preg_replace( '/,$/' , '' , $RTN );
			$RTN .= "\n";
		}
		return $RTN;
	} // mk_csv()

	/**
	 * ファイルを複製する。
	 *
	 * @param string $from コピー元ファイルのパス
	 * @param string $to コピー先のパス
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function copy( $from , $to , $perm = null ){
		$from = $this->localize_path($from);
		$to   = $this->localize_path($to  );

		if( !$this->is_file( $from ) ){
			return false;
		}
		if( !$this->is_readable( $from ) ){
			return false;
		}

		if( $this->is_file( $to ) ){
			//	まったく同じファイルだった場合は、複製しないでtrueを返す。
			if( md5_file( $from ) == md5_file( $to ) && filesize( $from ) == filesize( $to ) ){
				return true;
			}
		}
		if( !@copy( $from , $to ) ){
			return false;
		}
		$this->chmod( $to , $perm );
		return true;
	}//copy()

	/**
	 * ディレクトリを再帰的に複製する(下層ディレクトリも全てコピー)
	 *
	 * ディレクトリを、含まれる内容ごと複製します。
	 * 受け取ったパスがファイルの場合は、単体のファイルが複製されます。
	 *
	 * @param string $from コピー元ファイルのパス
	 * @param string $to コピー先のパス
	 * @param int $perm 保存するファイルに与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function copy_r( $from , $to , $perm = null ){
		$from = $this->localize_path($from);
		$to   = $this->localize_path($to  );

		$result = true;

		if( $this->is_file( $from ) ){
			if( $this->mkdir_r( dirname( $to ) ) ){
				if( !$this->copy( $from , $to , $perm ) ){
					$result = false;
				}
			}else{
				$result = false;
			}
		}elseif( $this->is_dir( $from ) ){
			if( !$this->is_dir( $to ) ){
				if( !$this->mkdir_r( $to ) ){
					$result = false;
				}
			}
			$itemlist = $this->ls( $from );
			if( is_array($itemlist) ){
				foreach( $itemlist as $Line ){
					if( $Line == '.' || $Line == '..' ){ continue; }
					if( $this->is_dir( $from.DIRECTORY_SEPARATOR.$Line ) ){
						if( $this->is_file( $to.DIRECTORY_SEPARATOR.$Line ) ){
							continue;
						}elseif( !$this->is_dir( $to.DIRECTORY_SEPARATOR.$Line ) ){
							if( !$this->mkdir_r( $to.DIRECTORY_SEPARATOR.$Line ) ){
								$result = false;
							}
						}
						if( !$this->copy_r( $from.DIRECTORY_SEPARATOR.$Line , $to.DIRECTORY_SEPARATOR.$Line , $perm ) ){
							$result = false;
						}
						continue;
					}elseif( $this->is_file( $from.DIRECTORY_SEPARATOR.$Line ) ){
						if( !$this->copy_r( $from.DIRECTORY_SEPARATOR.$Line , $to.DIRECTORY_SEPARATOR.$Line , $perm ) ){
							$result = false;
						}
						continue;
					}
				}
			}
		}

		return $result;
	} // copy_r()

	/**
	 * パーミッションを変更する。
	 *
	 * @param string $filepath 対象のパス
	 * @param int $perm 与えるパーミッション
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function chmod( $filepath, $perm = null ){
		$filepath = $this->localize_path($filepath);
		if( !file_exists($filepath) ){
			return;
		}

		if( is_null( $perm ) ){
			if( $this->is_dir( $filepath ) ){
				$perm = $this->default_permission['dir'];
			}else{
				$perm = $this->default_permission['file'];
			}
		}
		if( is_null( $perm ) ){
			$perm = 0775; // コンフィグに設定モレがあった場合
		}
		return chmod( $filepath , $perm );
	} // chmod()

	/**
	 * パーミッションを再帰的に変更する。(下層のファイルやディレクトリも全て)
	 *
	 * `$perm_file` と `$perm_dir` が省略された場合は、代わりに初期化時に登録されたデフォルトのパーミッションが与えられます。
	 *
	 * 第2引数 `$perm_dir` が省略され、最初の引数 `$perm_file` だけが与えられた場合は、 ファイルとディレクトリの両方に `$perm_file` が適用されます。
	 *
	 * @param string $filepath 対象のパス
	 * @param int $perm_file ファイルに与えるパーミッション (省略可)
	 * @param int $perm_dir ディレクトリに与えるパーミッション (省略可)
	 * @return bool 成功時に `true`、失敗時に `false` を返します。
	 */
	public function chmod_r( $filepath, $perm_file = null, $perm_dir = null ){
		$filepath = $this->localize_path($filepath);
		if( !is_null( $perm_file ) && is_null($perm_dir) ){
			// パーミッション設定値が1つだけ与えられた場合には、
			// ファイルにもディレクトリにも適用する。
			$perm_dir = $perm_file;
		}

		$result = true;

		if( $this->is_file( $filepath ) ){
			if( !$this->chmod( $filepath, $perm_file ) ){
				$result = false;
			}
		}elseif( $this->is_dir( $filepath ) ){
			$itemlist = $this->ls( $filepath );
			if( is_array($itemlist) ){
				foreach( $itemlist as $Line ){
					if( $Line == '.' || $Line == '..' ){ continue; }
					if( $this->is_dir( $filepath.DIRECTORY_SEPARATOR.$Line ) ){
						if( !$this->chmod( $filepath.DIRECTORY_SEPARATOR.$Line, $perm_dir ) ){
							$result = false;
						}
						if( !$this->chmod_r( $filepath.DIRECTORY_SEPARATOR.$Line, $perm_file, $perm_dir ) ){
							$result = false;
						}
						continue;
					}elseif( $this->is_file( $filepath.DIRECTORY_SEPARATOR.$Line ) ){
						if( !$this->chmod( $filepath.DIRECTORY_SEPARATOR.$Line, $perm_file ) ){
							$result = false;
						}
						continue;
					}
				}
			}
		}

		return $result;
	} // chmod_r()


	/**
	 * パーミッション情報を調べ、3桁の数字で返す。
	 *
	 * @param string $path 対象のパス
	 * @return int|bool 成功時に 3桁の数字、失敗時に `false` を返します。
	 */
	public function get_permission( $path ){
		$path = $this->localize_path($path);

		if( !file_exists( $path ) ){
			return false;
		}
		$perm = rtrim( sprintf( "%o\n" , fileperms( $path ) ) );
		$start = strlen( $perm ) - 3;
		return substr( $perm , $start , 3 );
	}//get_permission()


	/**
	 * ディレクトリにあるファイル名のリストを配列で返す。
	 *
	 * @param string $path 対象ディレクトリのパス
	 * @return array|bool 成功時にファイルまたはディレクトリ名の一覧を格納した配列、失敗時に `false` を返します。
	 */
	public function ls($path){
		$path = $this->localize_path($path);

		if( $path === false ){ return false; }
		if( !file_exists( $path ) ){ return false; }
		if( !$this->is_dir( $path ) ){ return false; }

		$RTN = array();
		$dr = @opendir($path);
		while( ( $ent = readdir( $dr ) ) !== false ){
			// CurrentDirとParentDirは含めない
			if( $ent == '.' || $ent == '..' ){ continue; }
			array_push( $RTN , $ent );
		}
		closedir($dr);
		if( strlen( $this->filesystem_encoding ) ){
			//PxFW 0.6.4 追加
			$RTN = @$this->convert_filesystem_encoding( $RTN );
		}
		usort($RTN, "strnatcmp");
		return	$RTN;
	}//ls()

	/**
	 * ディレクトリの内部を比較し、$comparisonに含まれない要素を$targetから削除する。
	 *
	 * @param string $target クリーニング対象のディレクトリパス
	 * @param string $comparison 比較するディレクトリのパス
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function compare_and_cleanup( $target , $comparison ){
		if( is_null( $comparison ) || is_null( $target ) ){ return false; }

		$target = $this->localize_path($target);
		$comparison = $this->localize_path($comparison);

		if( !file_exists( $comparison ) && file_exists( $target ) ){
			$this->rm( $target );
			return true;
		}

		if( $this->is_dir( $target ) ){
			$flist = $this->ls( $target );
		}else{
			return true;
		}

		if( is_array($flist) ){
			foreach ( $flist as $Line ){
				if( $Line == '.' || $Line == '..' ){ continue; }
				$this->compare_and_cleanup( $target.DIRECTORY_SEPARATOR.$Line , $comparison.DIRECTORY_SEPARATOR.$Line );
			}
		}

		return true;
	}//compare_and_cleanup()

	/**
	 * ディレクトリを同期する。
	 *
	 * @param string $path_sync_from 同期元ディレクトリ
	 * @param string $path_sync_to 同期先ディレクトリ
	 * @return bool 常に `true` を返します。
	 */
	public function sync_dir( $path_sync_from , $path_sync_to ){
		$this->copy_r( $path_sync_from , $path_sync_to );
		$this->compare_and_cleanup( $path_sync_to , $path_sync_from );
		return true;
	}//sync_dir()

	/**
	 * 指定されたディレクトリ以下の、全ての空っぽのディレクトリを削除する。
	 *
	 * @param string $path ディレクトリパス
	 * @param array $options オプション
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function remove_empty_dir( $path , $options = array() ){
		$path = $this->localize_path($path);

		if( !$this->is_writable( $path ) ){ return false; }
		if( !$this->is_dir( $path ) ){ return false; }
		if( $this->is_file( $path ) || $this->is_link( $path ) ){ return false; }
		$path = @realpath( $path );
		if( $path === false ){ return false; }

		// Normalize $options
		if( !is_array($options) ){
			$options = array();
		}
		if( !array_key_exists( 'depth', $options ) ){
			$options['depth'] = null;
		}

		// --------------------------------------
		// 次の階層を処理するかどうかのスイッチ
		$switch_donext = false;
		if( is_null( $options['depth'] ) ){
			// 深さの指定がなければ掘る
			$switch_donext = true;
		}elseif( !is_int( $options['depth'] ) ){
			// 指定がnullでも数値でもなければ掘らない
			$switch_donext = false;
		}elseif( $options['depth'] <= 0 ){
			// 指定がゼロ以下なら、今回の処理をして終了
			$switch_donext = false;
		}elseif( $options['depth'] > 0 ){
			// 指定が正の数(ゼロは含まない)なら、掘る
			$options['depth'] --;
			$switch_donext = true;
		}else{
			return false;
		}
		// / 次の階層を処理するかどうかのスイッチ
		// --------------------------------------

		$flist = $this->ls( $path );
		if( !count( $flist ) ){
			// 開いたディレクトリの中身が
			// "." と ".." のみだった場合
			// 削除して終了
			$result = @rmdir( $path );
			return	$result;
		}
		$alive = false;
		foreach ( $flist as $Line ){
			if( $Line == '.' || $Line == '..' ){ continue; }
			if( $this->is_link( $path.DIRECTORY_SEPARATOR.$Line ) ){
				// シンボリックリンクは無視する。
			}elseif( $this->is_dir( $path.DIRECTORY_SEPARATOR.$Line ) ){
				if( $switch_donext ){
					// さらに掘れと指令があれば、掘る。
					$this->remove_empty_dir( $path.DIRECTORY_SEPARATOR.$Line , $options );
				}
			}
			if( file_exists( $path.DIRECTORY_SEPARATOR.$Line ) ){
				$alive = true;
			}
		}
		if( !$alive ){
			$result = @rmdir( $path );
			return	$result;
		}
		return true;
	}//remove_empty_dir()


	/**
	 * 指定された2つのディレクトリの内容を比較し、まったく同じかどうか調べる。
	 *
	 * @param string $dir_a 比較対象ディレクトリA
	 * @param string $dir_b 比較対象ディレクトリB
	 * @param array $options オプション
	 * <dl>
	 *   <dt>bool $options['compare_filecontent']</dt>
	 * 	   <dd>ファイルの中身も比較するか？</dd>
	 *   <dt>bool $options['compare_emptydir']</dt>
	 * 	   <dd>空っぽのディレクトリの有無も評価に含めるか？</dd>
	 * </dl>
	 * @return bool 同じ場合に `true`、異なる場合に `false` を返します。
	 */
	public function compare_dir( $dir_a , $dir_b , $options = array() ){

		if( strlen( $this->filesystem_encoding ) ){
			//PxFW 0.6.4 追加
			$dir_a = @$this->convert_filesystem_encoding( $dir_a );
			$dir_b = @$this->convert_filesystem_encoding( $dir_b );
		}

		if( ( $this->is_file( $dir_a ) && !$this->is_file( $dir_b ) ) || ( !$this->is_file( $dir_a ) && $this->is_file( $dir_b ) ) ){
			return false;
		}
		if( ( ( $this->is_dir( $dir_a ) && !$this->is_dir( $dir_b ) ) || ( !$this->is_dir( $dir_a ) && $this->is_dir( $dir_b ) ) ) && $options['compare_emptydir'] ){
			return false;
		}

		// Normalize $options
		if( !is_array($options) ){
			$options = array();
		}
		if( !array_key_exists( 'compare_filecontent', $options ) ){
			$options['compare_filecontent'] = null;
		}
		if( !array_key_exists( 'compare_emptydir', $options ) ){
			$options['compare_emptydir'] = null;
		}

		if( $this->is_file( $dir_a ) && $this->is_file( $dir_b ) ){
			// --------------------------------------
			// 両方ファイルだったら
			if( $options['compare_filecontent'] ){
				// ファイルの内容も比較する設定の場合、
				// それぞれファイルを開いて同じかどうかを比較
				$filecontent_a = $this->read_file( $dir_a );
				$filecontent_b = $this->read_file( $dir_b );
				if( $filecontent_a !== $filecontent_b ){
					return false;
				}
			}
			return true;
		}

		if( $this->is_dir( $dir_a ) || $this->is_dir( $dir_b ) ){
			// --------------------------------------
			// 両方ディレクトリだったら
			$contlist_a = $this->ls( $dir_a );
			$contlist_b = $this->ls( $dir_b );

			if( $options['compare_emptydir'] && $contlist_a !== $contlist_b ){
				// 空っぽのディレクトリも厳密に評価する設定で、
				// ディレクトリ内の要素配列の内容が異なれば、false。
				return false;
			}

			$done = array();
			foreach( $contlist_a as $Line ){
				// Aをチェック
				if( $Line == '..' || $Line == '.' ){ continue; }
				if( !$this->compare_dir( $dir_a.DIRECTORY_SEPARATOR.$Line , $dir_b.DIRECTORY_SEPARATOR.$Line , $options ) ){
					return false;
				}
				$done[$Line] = true;
			}

			foreach( $contlist_b as $Line ){
				// Aに含まれなかったBをチェック
				if( $done[$Line] ){ continue; }
				if( $Line == '..' || $Line == '.' ){ continue; }
				if( !$this->compare_dir( $dir_a.DIRECTORY_SEPARATOR.$Line , $dir_b.DIRECTORY_SEPARATOR.$Line , $options ) ){
					return false;
				}
				$done[$Line] = true;
			}

		}

		return true;
	}//compare_dir()


	/**
	 * サーバがUNIXパスか調べる。
	 *
	 * @return bool UNIXパスなら `true`、それ以外なら `false` を返します。
	 */
	public function is_unix(){
		if( DIRECTORY_SEPARATOR == '/' ){
			return true;
		}
		return false;
	}//is_unix()

	/**
	 * サーバがWindowsパスか調べる。
	 *
	 * @return bool Windowsパスなら `true`、それ以外なら `false` を返します。
	 */
	public function is_windows(){
		if( DIRECTORY_SEPARATOR == '\\' ){
			return true;
		}
		return false;
	}//is_windows()


	/**
	 * パスを正規化する。
	 *
	 * 受け取ったパスを、スラッシュ区切りの表現に正規化します。
	 * Windowsのボリュームラベルが付いている場合は削除します。
	 * URIスキーム(http, https, ftp など) で始まる場合、2つのスラッシュで始まる場合(`//www.example.com/abc/` など)、これを残して正規化します。
	 *
	 *  - 例： `\a\b\c.html` → `/a/b/c.html` バックスラッシュはスラッシュに置き換えられます。
	 *  - 例： `/a/b////c.html` → `/a/b/c.html` 余計なスラッシュはまとめられます。
	 *  - 例： `C:\a\b\c.html` → `/a/b/c.html` ボリュームラベルは削除されます。
	 *  - 例： `http://a/b/c.html` → `http://a/b/c.html` URIスキームは残されます。
	 *  - 例： `//a/b/c.html` → `//a/b/c.html` ドメイン名は残されます。
	 *
	 * @param string $path 正規化するパス
	 * @return string 正規化されたパス
	 */
	public function normalize_path($path){
		$path = trim($path);
		$path = $this->convert_encoding( $path );//文字コードを揃える
		$path = preg_replace( '/\\/|\\\\/s', '/', $path );//バックスラッシュをスラッシュに置き換える。
		$path = preg_replace( '/^[A-Z]\\:\\//s', '/', $path );//Windowsのボリュームラベルを削除
		$prefix = '';
		if( preg_match( '/^((?:[a-zA-Z0-9]+\\:)?\\/)(\\/.*)$/', $path, $matched ) ){
			$prefix = $matched[1];
			$path = $matched[2];
		}
		$path = preg_replace( '/\\/+/s', '/', $path );//重複するスラッシュを1つにまとめる
		return $prefix.$path;
	}


	/**
	 * パスをOSの標準的な表現に変換する。
	 *
	 * 受け取ったパスを、OSの標準的な表現に変換します。
	 * - スラッシュとバックスラッシュの違いを吸収し、`DIRECTORY_SEPARATOR` に置き換えます。
	 *
	 * @param string $path ローカライズするパス
	 * @return string ローカライズされたパス
	 */
	public function localize_path($path){
		$path = $this->convert_filesystem_encoding( $path );//文字コードを揃える
		$path = preg_replace( '/\\/|\\\\/s', '/', $path );//一旦スラッシュに置き換える。
		if( $this->is_unix() ){
			// Windows以外だった場合に、ボリュームラベルを受け取ったら削除する
			$path = preg_replace( '/^[A-Z]\\:\\//s', '/', $path );//Windowsのボリュームラベルを削除
		}
		$path = preg_replace( '/\\/+/s', '/', $path );//重複するスラッシュを1つにまとめる
		$path = preg_replace( '/\\/|\\\\/s', DIRECTORY_SEPARATOR, $path );
		return $path;
	}



	/**
	 * 受け取ったテキストを、ファイルシステムエンコードに変換する。
	 *
	 * @param mixed $text テキスト
	 * @return string 文字セット変換後のテキスト
	 */
	private function convert_filesystem_encoding( $text ){
		$RTN = $text;
		if( !is_callable( 'mb_internal_encoding' ) ){
			return $text;
		}
		if( !strlen( $this->filesystem_encoding ) ){
			return $text;
		}

		$to_encoding = $this->filesystem_encoding;
		$from_encoding = mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP,JIS,ASCII';

		return $this->convert_encoding( $text, $to_encoding, $from_encoding );

	}//convert_filesystem_encoding()

	/**
	 * 受け取ったテキストを、ファイルシステムエンコードに変換する。
	 *
	 * @param mixed $text テキスト
	 * @param string $to_encoding 文字セット(省略時、内部文字セット)
	 * @param string $from_encoding 変換前の文字セット
	 * @return string 文字セット変換後のテキスト
	 */
	public function convert_encoding( $text, $to_encoding = null, $from_encoding = null ){
		$RTN = $text;
		if( !is_callable( 'mb_internal_encoding' ) ){
			return $text;
		}

		$to_encoding_fin = $to_encoding;
		if( !strlen($to_encoding_fin) ){
			$to_encoding_fin = mb_internal_encoding();
		}
		if( !strlen($to_encoding_fin) ){
			$to_encoding_fin = 'UTF-8';
		}

		$from_encoding_fin = (strlen($from_encoding)?$from_encoding.',':'').mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP,JIS,ASCII';

		// ---
		if( is_array( $text ) ){
			$RTN = array();
			if( !count( $text ) ){
				return $text;
			}
			foreach( $text as $key=>$row ){
				$RTN[$key] = $this->convert_encoding( $row, $to_encoding, $from_encoding );
			}
		}else{
			if( !strlen( $text ) ){
				return $text;
			}
			$RTN = mb_convert_encoding( $text, $to_encoding_fin, $from_encoding_fin );
		}
		return $RTN;
	}//convert_encoding()

	/**
	 * 受け取ったテキストを、指定の改行コードに変換する。
	 *
	 * @param mixed $text テキスト
	 * @param string $crlf 改行コード名。CR|LF(default)|CRLF
	 * @return string 改行コード変換後のテキスト
	 */
	public function convert_crlf( $text, $crlf = null ){
		if( !strlen($crlf) ){
			$crlf = 'LF';
		}
		$crlf_code = "\n";
		switch(strtoupper($crlf)){
			case 'CR':
				$crlf_code = "\r";
				break;
			case 'CRLF':
				$crlf_code = "\r\n";
				break;
			case 'LF':
			default:
				$crlf_code = "\n";
				break;
		}
		$RTN = $text;
		if( is_array( $text ) ){
			$RTN = array();
			if( !count( $text ) ){
				return $text;
			}
			foreach( $text as $key=>$val ){
				$RTN[$key] = $this->convert_crlf( $val , $crlf );
			}
		}else{
			if( !strlen( $text ) ){
				return $text;
			}
			$RTN = preg_replace( '/\r\n|\r|\n/', $crlf_code, $text );
		}
		return $RTN;
	}

}
?><?php
/**
 * tomk79/request
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */

namespace tomk79;

/**
 * tomk79/request core class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class request{
	/**
	 * 設定オブジェクト
	 */
	private $conf;
	/**
	 * ファイルシステムオブジェクト
	 */
	private $fs;
	/**
	 * URLパラメータ
	 */
	private $param = array();
	/**
	 * コマンドからのアクセス フラグ
	 */
	private $flg_cmd = false;
	/**
	 * リクエストファイルパス
	 */
	private $request_file_path;
	/**
	 * 優先ディレクトリインデックス
	 */
	private $directory_index_primary;
	/**
	 * コマンドラインオプション
	 */
	private $cli_options;
	/**
	 * コマンドラインパラメータ
	 */
	private $cli_params;

	/**
	 * コンストラクタ
	 *
	 * @param object $conf 設定オブジェクト
	 */
	public function __construct($conf=null){
		$this->conf = $conf;
		if( !is_object($this->conf) ){
			$this->conf = json_decode('{}');
		}
		$this->fs = new \tomk79\filesystem();

		if(!property_exists($this->conf, 'get') || !@is_array($this->conf->get)){
			$this->conf->get = $_GET;
		}
		if(!property_exists($this->conf, 'post') || !@is_array($this->conf->post)){
			$this->conf->post = $_POST;
		}
		if(!property_exists($this->conf, 'files') || !@is_array($this->conf->files)){
			$this->conf->files = $_FILES;
		}
		if(!property_exists($this->conf, 'server') || !@is_array($this->conf->server)){
			$this->conf->server = $_SERVER;
		}
		if( !array_key_exists( 'PATH_INFO' , $this->conf->server ) ){
			$this->conf->server['PATH_INFO'] = null;
		}
		if( !array_key_exists( 'HTTP_USER_AGENT' , $this->conf->server ) ){
			$this->conf->server['HTTP_USER_AGENT'] = null;
		}
		if( !array_key_exists( 'argv' , $this->conf->server ) ){
			$this->conf->server['argv'] = null;
		}
		if(!property_exists($this->conf, 'session_name') || !@strlen($this->conf->session_name)){
			$this->conf->session_name = 'SESSID';
		}
		if(!property_exists($this->conf, 'session_expire') || !@strlen($this->conf->session_expire)){
			$this->conf->session_expire = 1800;
		}
		if(!property_exists($this->conf, 'directory_index_primary') || !@strlen($this->conf->directory_index_primary)){
			$this->conf->directory_index_primary = 'index.html';
		}
		if(!property_exists($this->conf, 'cookie_default_path') || !@strlen($this->conf->cookie_default_path)){
			// クッキーのデフォルトのパス
			// session の範囲もこの設定に従う。
			$this->conf->cookie_default_path = $this->get_path_current_dir();
		}

		$this->parse_input();
		$this->session_start();
	}

	/**
	 *	入力値を解析する。
	 *
	 * `$_GET`, `$_POST`, `$_FILES` に送られたパラメータ情報を取りまとめ、1つの連想配列としてまとめま、オブジェクト内に保持します。
	 *
	 * コマンドラインから実行された場合は、コマンドラインオプションをそれぞれ `=` 記号で区切り、URLパラメータ同様にパースします。
	 *
	 * このメソッドの処理には、入力文字コードの変換(UTF-8へ統一)などの整形処理が含まれます。
	 *
	 * @return bool 常に `true`
	 */
	private function parse_input(){
		$this->request_file_path = $this->conf->server['PATH_INFO'];
		if( !strlen($this->request_file_path) ){
			$this->request_file_path = '/';
		}
		$this->cli_params = array();
		$this->cli_options = array();

		if( !array_key_exists( 'REMOTE_ADDR' , $this->conf->server ) ){
			//  コマンドラインからの実行か否か判断
			$this->flg_cmd = true;//コマンドラインから実行しているかフラグ
			if( is_array( $this->conf->server['argv'] ) && count( $this->conf->server['argv'] ) ){
				$tmp_path = null;
				for( $i = 0; count( $this->conf->server['argv'] ) > $i; $i ++ ){
					if( preg_match( '/^\-/', $this->conf->server['argv'][$i] ) ){
						$this->cli_params = array();//オプションの前に引数は付けられない
						$this->cli_options[$this->conf->server['argv'][$i]] = $this->conf->server['argv'][$i+1];
						$i ++;
					}else{
						array_push( $this->cli_params, $this->conf->server['argv'][$i] );
					}
				}
				$tmp_path = @$this->cli_params[count($this->cli_params)-1];
				if( preg_match( '/^\//', $tmp_path ) && @is_array($this->conf->server['argv']) ){
					$tmp_path = array_pop( $this->conf->server['argv'] );
					$tmp_path = parse_url($tmp_path);
					$this->request_file_path = $tmp_path['path'];
					@parse_str( $tmp_path['query'], $query );
					if( is_array($query) ){
						$this->conf->get = array_merge( $this->conf->get, $query );
					}
				}
				unset( $tmp_path );
			}
		}

		if( ini_get('magic_quotes_gpc') ){
			// PHPINIのmagic_quotes_gpc設定がOnだったら、
			// エスケープ文字を削除。
			foreach( array_keys( $this->conf->get ) as $Line ){
				$this->conf->get[$Line] = self::stripslashes( $this->conf->get[$Line] );
			}
			foreach( array_keys( $this->conf->post ) as $Line ){
				$this->conf->post[$Line] = self::stripslashes( $this->conf->post[$Line] );
			}
		}

		$this->conf->get = self::convert_encoding( $this->conf->get );
		$this->conf->post = self::convert_encoding( $this->conf->post );
		$param = array_merge( $this->conf->get , $this->conf->post );
		$param = $this->normalize_input( $param );

		if( is_array( $this->conf->files ) ){
			$FILES_KEYS = array_keys( $this->conf->files );
			foreach($FILES_KEYS as $Line){
				$this->conf->files[$Line]['name'] = self::convert_encoding( $this->conf->files[$Line]['name'] );
				$this->conf->files[$Line]['name'] = mb_convert_kana( $this->conf->files[$Line]['name'] , 'KV' , mb_internal_encoding() );
				$param[$Line] = $this->conf->files[$Line];
			}
		}

		$this->param = $param;
		unset($param);

		if (preg_match('/\/$/', $this->request_file_path)) {
			$this->request_file_path .= $this->conf->directory_index_primary;
		}
		$this->request_file_path = $this->fs->get_realpath( $this->request_file_path );
		$this->request_file_path = $this->fs->normalize_path( $this->request_file_path );

		return	true;
	}//parse_input()

	/**
	 *	入力値に対する標準的な変換処理
	 *
	 * @param array $param パラメータ
	 * @return array 変換後のパラメータ
	 */
	private function normalize_input( $param ){
		$is_callable_mb_check_encoding = is_callable( 'mb_check_encoding' );
		foreach( $param as $key=>$val ){
			// URLパラメータを加工
			if( is_array( $val ) ){
				// 配列なら
				$param[$key] = $this->normalize_input( $param[$key] );
			}elseif( is_string( $param[$key] ) ){
				// 文字列なら
				$param[$key] = mb_convert_kana( $param[$key] , 'KV' , mb_internal_encoding() );
					// 半角カナは全角に統一
				$param[$key] = preg_replace( '/\r\n|\r|\n/' , "\n" , $param[$key] );
					// 改行コードはLFに統一
				if( $is_callable_mb_check_encoding ){
					// 不正なバイトコードのチェック
					if( !mb_check_encoding( $key , mb_internal_encoding() ) ){
						// キーの中に見つけたらパラメータごと削除
						unset( $param[$key] );
					}
					if( !mb_check_encoding( $param[$key] , mb_internal_encoding() ) ){
						// 値の中に見つけたら false に置き換える
						$param[$key] = false;
					}
				}
			}
		}
		return $param;
	}//normalize_input()

	/**
	 * パラメータを取得する。
	 *
	 * `$_GET`, `$_POST`、`$_FILES` を合わせた連想配列の中から `$key` に当たる値を引いて返します。
	 * キーが定義されていない場合は、`null` を返します。
	 *
	 * @param string $key URLパラメータ名
	 * @return mixed URLパラメータ値
	 */
	public function get_param( $key ){
		if( !array_key_exists($key, $this->param) ){ return null; }
		return @$this->param[$key];
	}//get_param()

	/**
	 * パラメータをセットする。
	 *
	 * @param string $key パラメータ名
	 * @param mixed $val パラメータ値
	 * @return bool 常に `true`
	 */
	public function set_param( $key , $val ){
		$this->param[$key] = $val;
		return true;
	}//set_param()

	/**
	 * パラメータをすべて取得する。
	 *
	 * @return array すべてのパラメータを格納する連想配列
	 */
	public function get_all_params(){
		return $this->param;
	}

	/**
	 * コマンドラインオプションを取得する
	 * @param string $name オプション名
	 * @return string 指定されたオプション値
	 */
	public function get_cli_option( $name ){
		if( !array_key_exists($name, $this->cli_options) ){
			return null;
		}
		return @$this->cli_options[$name];
	}

	/**
	 * すべてのコマンドラインオプションを連想配列で取得する
	 * @return array すべてのコマンドラインオプション
	 */
	public function get_cli_options(){
		return @$this->cli_options;
	}

	/**
	 * コマンドラインパラメータを取得する
	 * @param string $idx パラメータ番号
	 * @return string 指定されたオプション値
	 */
	public function get_cli_param( $idx = 0 ){
		if($idx < 0){
			// マイナスのインデックスが与えられた場合、
			// 配列の最後から数える
			$idx = count($this->cli_params)+$idx;
		}
		return @$this->cli_params[$idx];
	}

	/**
	 * すべてのコマンドラインパラメータを配列で取得する
	 * @return array すべてのコマンドラインパラメータ
	 */
	public function get_cli_params(){
		return @$this->cli_params;
	}



	// ----- cookies -----

	/**
	 * クッキー情報を取得する。
	 *
	 * @param string $key クッキー名
	 * @return mixed クッキーの値
	 */
	public function get_cookie( $key ){
		if( @!is_array( $_COOKIE ) ){ return null; }
		if( @!array_key_exists($key, $_COOKIE) ){ return null; }
		return	@$_COOKIE[$key];
	}//get_cookie()

	/**
	 * クッキー情報をセットする。
	 *
	 * @param string $key クッキー名
	 * @param string $val クッキー値
	 * @param string $expire クッキーの有効期限
	 * @param string $path サーバー上での、クッキーを有効としたいパス
	 * @param string $domain クッキーが有効なドメイン
	 * @param bool $secure クライアントからのセキュアな HTTPS 接続の場合にのみクッキーが送信されるようにします。デフォルトは `true`
	 * @return 成功時 `true`、失敗時 `false` を返します。
	 */
	public function set_cookie( $key , $val , $expire = null , $path = null , $domain = null , $secure = true ){
		if( is_null( $path ) ){
			$path = $this->conf->cookie_default_path;
			if( !strlen( $path ) ){
				$path = $this->get_path_current_dir();
			}
			if( !strlen( $path ) ){
				$path = '/';
			}
		}
		if( !@setcookie( $key , $val , $expire , $path , $domain , $secure ) ){
			return false;
		}

		$_COOKIE[$key] = $val;//現在の処理からも呼び出せるように
		return true;
	}//set_cookie()

	/**
	 * クッキー情報を削除する。
	 *
	 * @param string $key クッキー名
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function delete_cookie( $key ){
		if( !@setcookie( $key , null ) ){
			return false;
		}
		unset( $_COOKIE[$key] );
		return true;
	}//delete_cookie()



	// ----- session -----

	/**
	 * セッションを開始する。
	 *
	 * @param string $sid セッションID。省略時、自動発行。
	 * @return bool セッションが正常に開始した場合に `true`、それ以外の場合に `false` を返します。
	 */
	private function session_start( $sid = null ){
		$expire = intval($this->conf->session_expire);
		$cache_limiter = 'nocache';
		$session_name = 'SESSID';
		if( strlen( $this->conf->session_name ) ){
			$session_name = $this->conf->session_name;
		}
		$path = $this->conf->cookie_default_path;
		if( !strlen( $path ) ){
			$path = $this->get_path_current_dir();
		}
		if( !strlen( $path ) ){
			$path = '/';
		}

		@session_name( $session_name );
		@session_cache_limiter( $cache_limiter );
		@session_cache_expire( intval($expire/60) );

		if( intval( ini_get( 'session.gc_maxlifetime' ) ) < $expire + 10 ){
			// ガベージコレクションの生存期間が
			// $expireよりも短い場合は、上書きする。
			// バッファは固定値で10秒。
			@ini_set( 'session.gc_maxlifetime' , $expire + 10 );
		}

		@session_set_cookie_params( 0 , $path );
			//  セッションクッキー自体の寿命は定めない(=0)
			//  そのかわり、SESSION_LAST_MODIFIED を新設し、自分で寿命を管理する。

		if( strlen( $sid ) ){
			// セッションIDに指定があれば、有効にする。
			session_id( $sid );
		}

		// セッションを開始
		$rtn = @session_start();

		// セッションの有効期限を評価
		if( strlen( $this->get_session( 'SESSION_LAST_MODIFIED' ) ) && intval( $this->get_session( 'SESSION_LAST_MODIFIED' ) ) < intval( time() - $expire ) ){
			#	セッションの有効期限が切れていたら、セッションキーを再発行。
			if( is_callable('session_regenerate_id') ){
				@session_regenerate_id( true );
			}
		}
		$this->set_session( 'SESSION_LAST_MODIFIED' , time() );
		return $rtn;
	}//session_start()

	/**
	 * セッションIDを取得する。
	 *
	 * @return string セッションID
	 */
	public function get_session_id(){
		return session_id();
	}//get_session_id()

	/**
	 * セッション情報を取得する。
	 *
	 * @param string $key セッションキー
	 * @return mixed `$key` に対応するセッション値
	 */
	public function get_session( $key ){
		if( @!is_array( $_SESSION ) ){ return null; }
		if( @!array_key_exists($key, $_SESSION) ){ return null; }
		return @$_SESSION[$key];
	}//get_session()

	/**
	 * セッション情報をセットする。
	 *
	 * @param string $key セッションキー
	 * @param mixed $val `$key` に対応するセッション値
	 * @return bool 常に `true` を返します。
	 */
	public function set_session( $key , $val ){
		$_SESSION[$key] = $val;
		return true;
	}//set_session()

	/**
	 * セッション情報を削除する。
	 *
	 * @param string $key セッションキー
	 * @return bool 常に `true` を返します。
	 */
	public function delete_session( $key ){
		unset( $_SESSION[$key] );
		return true;
	}//delete_session()


	// ----- upload file access -----

	/**
	 * アップロードされたファイルをセッションに保存する。
	 *
	 * @param string $key セッションキー
	 * @param array $ulfileinfo アップロードファイル情報
	 * @return bool 成功時 `true`、失敗時 `false` を返します。
	 */
	public function save_uploadfile( $key , $ulfileinfo ){
		// base64でエンコードして、バイナリデータを持ちます。
		// $ulfileinfo['content'] にバイナリを格納して渡すか、
		// $ulfileinfo['tmp_name'] または $ulfileinfo['path'] のいずれかに、
		// アップロードファイルのパスを指定してください。
		$fileinfo = array();
		$fileinfo['name'] = $ulfileinfo['name'];
		$fileinfo['type'] = $ulfileinfo['type'];

		if( $ulfileinfo['content'] ){
			$fileinfo['content'] = base64_encode( $ulfileinfo['content'] );
		}else{
			$filepath = '';
			if( @is_file( $ulfileinfo['tmp_name'] ) ){
				$filepath = $ulfileinfo['tmp_name'];
			}elseif( @is_file( $ulfileinfo['path'] ) ){
				$filepath = $ulfileinfo['path'];
			}else{
				return false;
			}
			$fileinfo['content'] = base64_encode( file_get_contents( $filepath ) );
		}

		if( @!is_array( $_SESSION ) ){
			$_SESSION = array();
		}
		if( @!array_key_exists('FILE', $_SESSION) ){
			$_SESSION['FILE'] = array();
		}

		$_SESSION['FILE'][$key] = $fileinfo;
		return	true;
	}
	/**
	 * セッションに保存されたファイル情報を取得する。
	 *
	 * @param string $key セッションキー
	 * @return array|bool 成功時、ファイル情報 を格納した連想配列、失敗時 `false` を返します。
	 */
	public function get_uploadfile( $key ){
		if(!strlen($key)){ return false; }
		if( @!is_array( $_SESSION ) ){
			return false;
		}
		if( @!array_key_exists('FILE', $_SESSION) ){
			return false;
		}
		if( @!array_key_exists($key, $_SESSION['FILE']) ){
			return false;
		}

		$rtn = @$_SESSION['FILE'][$key];
		if( is_null( $rtn ) ){ return false; }

		$rtn['content'] = base64_decode( @$rtn['content'] );
		return	$rtn;
	}
	/**
	 * セッションに保存されたファイル情報の一覧を取得する。
	 *
	 * @return array ファイル情報 を格納した連想配列
	 */
	public function get_uploadfile_list(){
		if( @!array_key_exists('FILE', $_SESSION) ){
			return false;
		}
		return	array_keys( $_SESSION['FILE'] );
	}
	/**
	 * セッションに保存されたファイルを削除する。
	 *
	 * @param string $key セッションキー
	 * @return bool 常に `true` を返します。
	 */
	public function delete_uploadfile( $key ){
		if( @!array_key_exists('FILE', $_SESSION) ){
			return true;
		}
		unset( $_SESSION['FILE'][$key] );
		return	true;
	}
	/**
	 * セッションに保存されたファイルを全て削除する。
	 *
	 * @return bool 常に `true` を返します。
	 */
	public function delete_uploadfile_all(){
		return	$this->delete_session( 'FILE' );
	}


	// ----- utils -----

	/**
	 * USER_AGENT を取得する。
	 *
	 * @return string USER_AGENT
	 */
	public function get_user_agent(){
		return @$this->conf->server['HTTP_USER_AGENT'];
	}//get_user_agent()

	/**
	 * リクエストパスを取得する。
	 *
	 * @return string リクエストパス
	 */
	public function get_request_file_path(){
		return $this->request_file_path;
	}//get_request_file_path()

	/**
	 *  SSL通信か調べる
	 *
	 * @return bool SSL通信の場合 `true`、それ以外の場合 `false` を返します。
	 */
	public function is_ssl(){
		if( @$this->conf->server['HTTP_SSL'] || @$this->conf->server['HTTPS'] ){
			// SSL通信が有効か否か判断
			return true;
		}
		return false;
	}

	/**
	 * コマンドラインによる実行か確認する。
	 *
	 * @return bool コマンドからの実行の場合 `true`、ウェブからの実行の場合 `false` を返します。
	 */
	public function is_cmd(){
		if( array_key_exists( 'REMOTE_ADDR' , $this->conf->server ) ){
			return false;
		}
		return	true;
	}


	// ----- private -----

	/**
	 * 受け取ったテキストを、指定の文字セットに変換する。
	 *
	 * @param mixed $text テキスト
	 * @param string $encode 変換後の文字セット。省略時、`mb_internal_encoding()` から取得
	 * @param string $encodefrom 変換前の文字セット。省略時、自動検出
	 * @return string 文字セット変換後のテキスト
	 */
	private static function convert_encoding( $text, $encode = null, $encodefrom = null ){
		if( !is_callable( 'mb_internal_encoding' ) ){ return $text; }
		if( !strlen( $encodefrom ) ){ $encodefrom = mb_internal_encoding().',UTF-8,SJIS-win,eucJP-win,SJIS,EUC-JP,JIS,ASCII'; }
		if( !strlen( $encode ) ){ $encode = mb_internal_encoding(); }

		if( is_array( $text ) ){
			$rtn = array();
			if( !count( $text ) ){ return $text; }
			$TEXT_KEYS = array_keys( $text );
			foreach( $TEXT_KEYS as $Line ){
				$KEY = mb_convert_encoding( $Line , $encode , $encodefrom );
				if( is_array( $text[$Line] ) ){
					$rtn[$KEY] = self::convert_encoding( $text[$Line] , $encode , $encodefrom );
				}else{
					$rtn[$KEY] = @mb_convert_encoding( $text[$Line] , $encode , $encodefrom );
				}
			}
		}else{
			if( !strlen( $text ) ){ return $text; }
			$rtn = @mb_convert_encoding( $text , $encode , $encodefrom );
		}
		return $rtn;
	}

	/**
	 * クォートされた文字列のクォート部分を取り除く。
	 *
	 * この関数は、PHPの `stripslashes()` のラッパーです。
	 * 配列を受け取ると再帰的に文字列を変換して返します。
	 *
	 * @param mixed $text テキスト
	 * @return string クォートが元に戻されたテキスト
	 */
	private static function stripslashes( $text ){
		if( is_array( $text ) ){
			// 配列なら
			foreach( $text as $key=>$val ){
				$text[$key] = self::stripslashes( $val );
			}
		}elseif( is_string( $text ) ){
			// 文字列なら
			$text = stripslashes( $text );
		}
		return	$text;
	}

	/**
	 * カレントディレクトリのパスを取得
	 * @return string ドキュメントルートからのパス(スラッシュ閉じ)
	 */
	private function get_path_current_dir(){
		//  環境変数から自動的に判断。
		$rtn = dirname( $this->conf->server['SCRIPT_NAME'] );
		if( !array_key_exists( 'REMOTE_ADDR' , $this->conf->server ) ){
			//  CUIから起動された場合
			//  ドキュメントルートが判定できないので、
			//  ドキュメントルート直下にあるものとする。
			$rtn = '/';
		}
		$rtn = str_replace('\\','/',$rtn);
		$rtn .= ($rtn!='/'?'/':'');
		return $rtn;
	}//get_path_current_dir()

}
?><?php
namespace picklesFramework2\px2agent;

/**
 * px2agent.php
 */
class px2agent{
	private $options;
	private $error_list = array();

	/**
	 * Constructor
	 */
	public function __construct($options = array()){
		$this->options = (array) $options;
	}

	/**
	 * Create project object
	 */
	public function createProject( $php_self ){
		$px2project = new px2project($this, $php_self, $this->options);
		return $px2project;
	}

	/**
	 * エラーを記録する
	 */
	public function error( $error_msg ){
		array_push($this->error_list, $error_msg);
		return;
	}
}
?><?php
namespace picklesFramework2\px2agent;

/**
 * px2project.php
 */
class px2project{
	private $main;
	private $path_entry_script;
	private $options;

	/**
	 * Constructor
	 */
	public function __construct($main, $path_entry_script, $options){
		$this->main = $main;
		$this->path_entry_script = $path_entry_script;
		$this->options = (array) $options;
	}


	/**
	 * Pickles 2 にクエリを投げて、結果を受け取る (汎用)
	 */
	public function query($request_path, $options = null, &$return_var = null){
		$path_cmd_php = 'php';
		if( array_key_exists('bin', $this->options) && strlen($this->options['bin']) ){
			$path_cmd_php = $this->options['bin'];
		}
		$path_cmd_php_ini = null;
		if( array_key_exists('ini', $this->options) && strlen($this->options['ini']) ){
			$path_cmd_php_ini = $this->options['ini'];
		}
		$path_extension_dir = null;
		if( array_key_exists('extension_dir', $this->options) && strlen($this->options['extension_dir']) ){
			$path_extension_dir = $this->options['extension_dir'];
		}

		$current_dir = realpath('.');
		$project_dir = dirname($this->path_entry_script);


		if(!is_string($request_path)){
			$this->main->error('Invalid argument supplied for 1st option $request_path in $px2project->query(). It required String value.');
			return false;
		}
		if(!strlen($request_path)){ $request_path = '/'; }
		if(is_null($options)){ $options = array(); }
		if(!is_array($options)){ $options = (array) $options; }
		$php_command = array();
		array_push( $php_command, addslashes($path_cmd_php) );
			// ↑ Windows でこれを `escapeshellarg()` でエスケープすると、なぜかエラーに。

		if( strlen($path_cmd_php_ini) ){
			$php_command = array_merge(
				$php_command,
				array(
					'-c', escapeshellarg($path_cmd_php_ini),// ← php.ini のパス
				)
			);
		}

		if( strlen($path_extension_dir) ){
			$php_command = array_merge(
				$php_command,
				array(
					'-d', escapeshellarg($path_extension_dir),// ← php.ini definition
				)
			);
		}

		array_push($php_command, escapeshellarg( realpath($this->path_entry_script) ));

		// 出力形式
		if( array_key_exists('output', $options) && $options['output'] == 'json' ){
			array_push($php_command, '-o');
			array_push($php_command, 'json');
		}

		// USER_AGENT
		if( array_key_exists('user_agent', $options) && strlen($options['user_agent']) ){
			array_push($php_command, '-u');
			array_push($php_command, escapeshellarg($options['user_agent']));
		}

		// Request Method
		if( array_key_exists('method', $options) && strlen($options['method']) ){
			array_push($php_command, '--method');
			array_push($php_command, escapeshellarg($options['method']));
		}

		// Request Body
		if( array_key_exists('body', $options) && strlen($options['body']) ){
			array_push($php_command, '--body');
			array_push($php_command, escapeshellarg($options['body']));
		}
		if( array_key_exists('body_file', $options) && strlen($options['body_file']) ){
			array_push($php_command, '--body-file');
			array_push($php_command, escapeshellarg($options['body_file']));
		}

		if( realpath('/') == '/' ){
			// Linux
			array_push($php_command, escapeshellarg($request_path));
		}else{
			// Windows
			array_push($php_command, escapeshellcmd($request_path));
		}


		$cmd = implode( ' ', $php_command );

		// コマンドを実行
		chdir($project_dir);
		ob_start();
		$proc = proc_open($cmd, array(
			0 => array('pipe','r'),
			1 => array('pipe','w'),
			2 => array('pipe','w'),
		), $pipes);
		$io = array();
		foreach($pipes as $idx=>$pipe){
			$io[$idx] = null;
			if( $idx >= 1 ){
				$io[$idx] = stream_get_contents($pipe);
			}
			fclose($pipe);
		}
		$return_var = proc_close($proc);
		ob_get_clean();

		$bin = $io[1]; // stdout
		if( strlen( $io[2] ) ){
			// $this->error($io[2]); // stderr
		}

		if( array_key_exists('output', $options) && $options['output'] == 'json' ){
			$bin = json_decode($bin);
		}

		chdir($current_dir);
		return $bin;

	}

	/**
	 * PX=api.*を投げる
	 */
	protected function apiGet($cmd, $path = '/', $param = array()){
		if( !strlen($path) ){
			$path = '/';
		}
		if( !is_array($param) ){
			$param = array();
		}

		$tmp_aryParam = array();
		foreach( $param as $idx=>$row ){
			array_push($tmp_aryParam, urlencode($idx).'='.urlencode($row) );
		}
		$param_str = '';
		if(count($tmp_aryParam)){
			$param_str = '&'.implode('&', $tmp_aryParam);
		}

		$errorMsg = null;
		$rtn = $this->query(
			$path.'?PX='.$cmd.$param_str ,
			array(
				"output" => "json",
			)
		);
		return $rtn;
	}

	/**
	 * PXコマンドを実行する
	 */
	public function px_command($cmd, $path, $param){
		return $this->apiGet($cmd, $path, $param);
	}

	/**
	 * バージョン番号を取得する
	 */
	public function get_version(){
		return $this->apiGet('api.get.version', '/', array());
	}


	/**
	 * configデータを取得する
	 */
	public function get_config(){
		return $this->apiGet('api.get.config', '/', array());
	}

	/**
	 * サイトマップデータを取得する
	 */
	public function get_sitemap(){
		return $this->apiGet('api.get.sitemap', '/', array());
	}

	/**
	 * pathまたはidからページ情報を得る
	 */
	public function get_page_info($path){
		return $this->apiGet('api.get.page_info', '/', array(
			"path" => $path
		));
	}

	/**
	 * 親ページのIDを取得する
	 */
	public function get_parent($path){
		return $this->apiGet('api.get.parent', $path, array());
	}

	/**
	 * 子階層のページの一覧を取得する
	 */
	public function get_children($path, $options = array()){
		if(is_array($options)){
			$options = $this->sitemap_children_params($options);
		}
		return $this->apiGet('api.get.children', $path, $options);
	}

	/**
	 * 兄弟ページの一覧を取得する
	 */
	public function get_bros($path, $options = array()){
		if(is_array($options)){
			$options = $this->sitemap_children_params($options);
		}
		return $this->apiGet('api.get.bros', $path, $options);
	}

	/**
	 * 次の兄弟ページを取得する
	 */
	public function get_bros_next($path, $options = array()){
		if(is_array($options)){
			$options = $this->sitemap_children_params($options);
		}
		return $this->apiGet('api.get.bros_next', $path, $options);
	}

	/**
	 * 前の兄弟ページを取得する
	 */
	public function get_bros_prev($path, $options = array()){
		if(is_array($options)){
			$options = $this->sitemap_children_params($options);
		}
		return $this->apiGet('api.get.bros_prev', $path, $options);
	}

	/**
	 * 次のページを取得する
	 */
	public function get_next($path, $options = array()){
		if(is_array($options)){
			$options = $this->sitemap_children_params($options);
		}
		return $this->apiGet('api.get.next', $path, $options);
	}

	/**
	 * 前のページを取得する
	 */
	public function get_prev($path, $options = array()){
		if(is_array($options)){
			$options = $this->sitemap_children_params($options);
		}
		return $this->apiGet('api.get.prev', $path, $options);
	}

	/**
	 * パンくず配列を取得する
	 */
	public function get_breadcrumb_array($path){
		return $this->apiGet('api.get.breadcrumb_array', $path, array());
	}

	/**
	 * ダイナミックパス情報を得る
	 */
	public function get_dynamic_path_info($path){
		return $this->apiGet('api.get.dynamic_path_info', '/', array(
			"path"=>$path,
		));
	}

	/**
	 * ダイナミックパスに値をバインドする
	 */
	public function bind_dynamic_path_param($path, $param){
		return $this->apiGet('api.get.bind_dynamic_path_param', '/', array(
			"path" => $path,
			"param" => json_encode($param),
		));
	}

	/**
	 * role を取得する
	 */
	public function get_role(F$path){
		return $this->apiGet('api.get.role', $path, array());
	}

	/**
	 * Actor のページID一覧を取得する
	 */
	public function get_actors($path){
		return $this->apiGet('api.get.actors', $path, array());
	}

	/**
	 * get home directory path (deprecated)
	 *
	 * `get_path_homedir()` は 非推奨のメソッドです。
	 * 代わりに、 `get_realpath_homedir()` を使用してください。
	 */
	public function get_path_homedir(){
		return $this->apiGet('api.get.path_homedir', '/', array());
	}

	/**
	 * get home directory path
	 */
	public function get_realpath_homedir(){
		return $this->apiGet('api.get.path_homedir', '/', array());
	}

	/**
	 * コンテンツルートディレクトリのパス(=install path) を取得する
	 */
	public function get_path_controot(){
		return $this->apiGet('api.get.path_controot', '/', array());
	}

	/**
	 * DOCUMENT_ROOT のパスを取得する (deprecated)
	 *
	 * `get_path_docroot()` は 非推奨のメソッドです。
	 * 代わりに、 `get_realpath_docroot()` を使用してください。
	 */
	public function get_path_docroot(){
		return $this->apiGet('api.get.path_docroot', '/', array());
	}

	/**
	 * DOCUMENT_ROOT のパスを取得する
	 */
	public function get_realpath_docroot(){
		return $this->apiGet('api.get.path_docroot', '/', array());
	}

	/**
	 * get content path
	 */
	public function get_path_content($path){
		return $this->apiGet('api.get.path_content', $path, array());
	}

	/**
	 * ローカルリソースディレクトリのパスを得る
	 */
	public function path_files($path, $path_resource = null){
		if (!strlen($path_resource)) { 
			$path_resource = '';
		}
		return $this->apiGet('api.get.path_files', $path, array(
			"path_resource"=>$path_resource,
		));
	}

	/**
	 * ローカルリソースディレクトリのサーバー内部パスを得る
	 */
	public function realpath_files($path, $path_resource = null){
		if (!strlen($path_resource)) { 
			$path_resource = '';
		}
		return $this->apiGet('api.get.realpath_files', $path, array(
			"path_resource"=>$path_resource,
		));
	}

	/**
	 * ローカルリソースのキャッシュディレクトリのパスを得る
	 */
	public function path_files_cache($path, $path_resource = null){
		if (!strlen($path_resource)) { 
			$path_resource = '';
		}
		return $this->apiGet('api.get.path_files_cache', $path, array(
			"path_resource"=>$path_resource,
		));
	}

	/**
	 * ローカルリソースのキャッシュディレクトリのサーバー内部パスを得る
	 */
	public function realpath_files_cache($path, $path_resource = null){
		if (!strlen($path_resource)) { 
			$path_resource = '';
		}
		return $this->apiGet('api.get.realpath_files_cache', $path, array(
			"path_resource"=>$path_resource,
		));
	}

	/**
	 * コンテンツ別の非公開キャッシュディレクトリのサーバー内部パスを得る
	 */
	public function realpath_files_private_cache($path, $path_resource = null){
		if (!strlen($path_resource)) { 
			$path_resource = '';
		}
		return $this->apiGet('api.get.realpath_files_private_cache', $path, array(
			"path_resource"=>$path_resource,
		));
	}

	/**
	 * domain を取得する
	 */
	public function get_domain(){
		return $this->apiGet('api.get.domain', '/', array());
	}

	/**
	 * directory_index(省略できるファイル名) の一覧を得る
	 */
	public function get_directory_index(){
		return $this->apiGet('api.get.directory_index', '/', array());
	}

	/**
	 * 最も優先されるインデックスファイル名を得る
	 */
	public function get_directory_index_primary(){
		return $this->apiGet('api.get.directory_index_primary', '/', array());
	}

	/**
	 * ファイルの処理方法を調べる
	 */
	public function get_path_proc_type($path){
		return $this->apiGet('api.get.path_proc_type', $path, array());
	}

	/**
	 * リンク先のパスを生成する
	 */
	public function href($path_linkto){
		return $this->apiGet('api.get.href', '/', array(
			"linkto"=>$path_linkto,
		));
	}

	/**
	 * パスがダイナミックパスにマッチするか調べる
	 */
	public function is_match_dynamic_path($path){
		return $this->apiGet('api.is.match_dynamic_path', '/', array(
			"path"=>$path,
		));
	}

	/**
	 * ページが、パンくず内に存在しているか調べる
	 */
	public function is_page_in_breadcrumb($path, $path_in){
		return $this->apiGet('api.is.page_in_breadcrumb', $path, array(
			"path"=>$path_in,
		));
	}

	/**
	 * 除外ファイルか調べる
	 */
	public function is_ignore_path($path){
		return $this->apiGet('api.is.ignore_path', '/', array(
			"path"=>$path,
		));
	}


	/**
	 * パブリッシュする
	 */
	public function publish($opt = array()){
		if( !is_array($opt) ){
			$opt = array();
		}

		// path_region
		if( !array_key_exists('path_region', $opt) || !$opt['path_region'] ){
			$opt['path_region'] = '';
		}

		// paths_region
		$str_paths_region = '';
		if( array_key_exists('paths_region', $opt) && is_string($opt['paths_region']) ){
			$opt['paths_region'] = array($opt['paths_region']);
		}
		if( array_key_exists('paths_region', $opt) && is_array($opt['paths_region']) ){
			foreach($opt['paths_region'] as $i=>$row){
				$str_paths_region .= '&paths_region[]='.urlencode($row);
			}
		}

		// paths_ignore
		$str_paths_ignore = '';
		if( array_key_exists('paths_ignore', $opt) && is_string($opt['paths_ignore']) ){
			$opt['paths_ignore'] = array($opt['paths_ignore']);
		}
		if( array_key_exists('paths_ignore', $opt) && is_array($opt['paths_ignore']) ){
			foreach($opt['paths_ignore'] as $i=>$row){
				$str_paths_ignore .= '&paths_ignore[]='.urlencode($row);
			}
		}

		// keep_cache
		$str_keep_cache = '';
		if( array_key_exists('keep_cache', $opt) && $opt['keep_cache'] ){
			$str_keep_cache = '&keep_cache=1';
		}

		return $this->query(
			'/?PX=publish.run&path_region=' . urlencode($opt['path_region']) . $str_paths_ignore . $str_paths_region . $str_keep_cache,
			$opt
		);
	}

	/**
	 * キャッシュを削除する
	 */
	public function clearcache($opt = array()){
		if( !is_array($opt) ){
			$opt = array();
		}

		return $this->query(
			'/?PX=clearcache' ,
			$opt
		);
	}


	/**
	 * get_children() へ渡されるオプションを調整する
	 * この形式のオプションは、get_bros(), get_bros_next(), get_bros_prev(), get_next(), get_prev() でも共通です。
	 */
	private function sitemap_children_params($options = array()){
		$options = (array) $options;
		$filter = null;
		if( array_key_exists('filter', $options) ){
			$filter = $options['filter'];
		}

		if(is_null($filter)){
			$filter = null;
		}elseif(is_string($filter)){
			switch( $filter ){
				case 'true':
				case '1':
					$filter = 'true'; break;
				case 'false':
				case '0':
					$filter = 'false'; break;
			}
		}else{
			$filter = ($filter?'true':'false');
		}

		$rtn = array();
		$rtn['filter'] = $filter;
		return $rtn;
	}

}
?><?php
namespace renconFramework;

/**
 * resourceMgr class
 *
 * @author Tomoya Koyanagi <tomk79@gmail.com>
 */
class resources{
	private $main;

	/**
	 * Constructor
	 */
	public function __construct( $main ){
		$this->main = $main;
	}

	public function echo_resource( $path ){
		$ext = null;
		if( preg_match('/\.([a-zA-Z0-9\_\-]*)$/', $path, $matched) ){
			$ext = $matched[1];
			$ext = strtolower($ext);
			$mime = $this->get_mime_type($ext);
			if( !$mime ){ $mime = 'text/html'; }
			header('Content-type: '.$mime);
		}
		echo $this->get($path);
		exit;
	}

	/**
	 * リソースを取得
	 */
	public function get( $path ){
		$path = preg_replace( '/$(?:\/*|\.\.?\/)*/', '', $path );

		$resources = array(

'images/sample-gif.gif' => '',
'images/sample-jpeg.jpg' => '/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAAKAAD/4QMUaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA2LjAtYzAwMiA3OS4xNjQzNTIsIDIwMjAvMDEvMzAtMTU6NTA6MzggICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjU0RjU0QUVGODlCODExRUE5OEIxOEY2RUQyODNFOUFDIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjU0RjU0QUVFODlCODExRUE5OEIxOEY2RUQyODNFOUFDIiB4bXA6Q3JlYXRvclRvb2w9IjEwLjMuMSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkM0NTVERUU5NkVCQzExRTdCNTFGQUYyQTFGOTk2NTMzIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkM0NTVERUVBNkVCQzExRTdCNTFGQUYyQTFGOTk2NTMzIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+/+4ADkFkb2JlAGTAAAAAAf/bAIQAFBAQGRIZJxcXJzImHyYyLiYmJiYuPjU1NTU1PkRBQUFBQUFERERERERERERERERERERERERERERERERERERERAEVGRkgHCAmGBgmNiYgJjZENisrNkREREI1QkRERERERERERERERERERERERERERERERERERERERERERERERERE/8AAEQgAWgB4AwEiAAIRAQMRAf/EAIYAAAIDAQEAAAAAAAAAAAAAAAMEAAIFAQYBAQEBAQEAAAAAAAAAAAAAAAEAAgMEEAACAAQEAwYEBAYDAQAAAAABAgARIQMxQRIEUWFx8JEiMhMFgcHRYqGxQiPh8VJyghUzQxQGEQADAAEDBAMBAAAAAAAAAAAAAREhQQISMVFhInGBMmL/2gAMAwEAAhEDEQA/AMqyEuG2QNQWjjj/ABhqxeS7uKywlL7sifpnAXsz2o0ACs2bllLvju2F/wBM7exJQaUAmNWMzjHOk1kbuXG3ShVFJyctyxAz7ukNDZ+kuu4gKtSkwU4SlnnygHt9m4wkQW9PUSwNW+4dI2/b7zl2LgeGszMMZ/gT8I0mrWwfYyd77W1lluWlAQDVqNzxywx58orZs3vDddCAQRqRR5h9vCN661qZUkTGWIXty4xjq7KTJgqltIXLmQcgI1ySCBbD2nc6vEcZmqnThzoa984busDLcBmDsSgrSp7fWE1Nij23UU8c8zxlhP50MamzuA2wwnpNBq459J5iHkr1KC98MfAAEM/EScAOZnXp0NYHbS1Ym89RUeH4nDvzh97Yto0kLACbSz5L2x74Vs2TfUBlVQQSNS6dMvnnDSGNrvLVwv5hpE3LUHOn5wO7ubZJuMRgPTHLGZ658ox3uoiiyJMyk6mrXrxg22KXrgmSSzftotAOJI4cAYxzRZH7u6t7dwzKrO0jNaz5cvjlCnu+zuXh6155WhLTbX5dpRq/+FXM2OM5/d17Ugu722u1JJ6kHgE8TKk43UUPIl0YgAaUCjSksfj2nEjbb28WNsWuhWunxamJnPgOmQiRUzDzmq6bhVnJDUFcR0wEN2/a90U1JpV6gpg5H3ZAwDcuu2vAgTIUgcNR/hBtnvQ8w0vV/Sx1FmPCY5d0eV8n+Tq3DRsH1T6VJhSmtPOs+A4Kccon7tgt6tCPElzzKxw/mICbup3dLLC6DLVUTJlRj+kHLLnCHunuLPQeHTUjg3zjgtrbmhBPcfc2d9DNPGsZd/das6QkL2sksZRDcnMLhnHrW3uZNGxuEZZGUiMD8ofse6ttwCZmvXv4x5wXjMTyjQt7hUGkcJ4xPaSPW7f3u1cBIBnLjSBbj3C1fBRDJpSnKf8AdIcI8tZ3LW3BHkOZH5xxnAdtTScNRTQS5H5Q1kOXTo1amU5hp1PWcJW97puawJtlOO3D6hJbCfCZgbWVJBnMxlTUKbmy91uFv3XwyOYjXs//AECMs2GBkY8jp9SRGIixfRNJEAxn4wPI9GPeDvL4KAyUnQvGmcSMS1de2Abc55kcIkduXqBobzZ2xouuNWrGRpTIygI2KpaY7YGTsBrlNpZ9B+cCs7/cSuIiaTUHSPDI5w1Y3LLaFqfhBk3Ez+vGPL7I31NC5tzaUtaKu5lq4MAcCop04mPLe9S9ctbWVtgCK/nw6RuqUNs6roSTDQDWX2zGfXAQpeFrdWymoknyXGGmZH6f7axnY3teckeZqIstsMQNQmcoLubAtuUttrC4th+ECLkkBhTgBHsToE9JiNQqM+UcD14Qa1cbRoK61TUwBoBPM/SASIMiISGbVxxVRjgYJeF13FyRMxIsBSYxhYaqKCa4CPQopt7cWyrDTjpnNv8AHCOe5wDH1mdZxcFeFBnHd3bNltIkFI1aR2ygK2jp9RKgY8pwBBlbi/pMvzjk/VeSVmYE4fzUEpA9s4tMAlpSOcEEesvbUfuTIzz7sv4RIFYsveHqGRyVdVSeAlh2nEgq/Iwda09mwXSgWp1Nly49MoB7de9WavUUpLAj5Qvc2gvhQrOFlhcl+Bh2zrsydJDR4f58YzieSB+47W36DblSQ5lTLnXPr8IX221N20l96zaSzMhyh+5sbot+OQRvFMEdpQsUbaqqq4I+05494iW7ETLAJtjbuXCCGBBmTgO3SGrnsquoNs6ZcQfwPYwoGYkMCdYpPjDu23O5mwU6sJ66hZZ9TxhrWopoT9v9vD3bi3E1G20tWqndiesN73YabaXVUKHuenpAxoa9coDYa/tLrsBMuZ6dWfXOJu91f3OmayVCGAVqU+cWXutwWA6bPwgKbasPKStfgR84pe9t3JGpmQACZJafbnlE/wBgjTL2mMj4dLSAHDvjn+00adVsnNgwmp59qfGGPuUMNmUCprnTPrHLF1bbajMj+njDNu4DcdmAAeYNKLPCnKAWw1q4lxpETmZYyzn1joZCvupmZzqIjXCzkNQASAHb8YmldWpUms/KT2oIsNu12spIsvgDj9YMIYN+zhmdgJzlKJB/Xu2FG3tqh9M+YeZsw0xEjlfbkN0C2vcSgAKAkeEFsiIIPcLt+ngBHICcS1u1DMyCY81DX4Tge6sJeIfSZnMHH5RmK5QvBV1UjwuAwHiBoYWIX9ILf4wX/wA9y0JsvxOUUTcNbppXqwnCvBkibc3MBIczHbdu6x0iZOGMDDymzY8RBCUuHwklucOSh28pt00shFKxDuEcSu21J/qAKn8Iv6G4IBALLxFZRd7F5wTclIYYTgqGMGBY0eB2VuDDUO8VgJBukmekDMYfX8IoVAxMj0jly3okQweYjRfRfQgb9whhxSXzhqz7dtb6zF1VH3Y90Z/icY4ZRUk598MejgprsOXPbijTVgQcIpbtMoac8SKZwrrpSc4sL5HA88Iowg0lgiZoDxJMSFhf4mY4RIoygO0zIdQxENf7A22LINIaU1nSfKHdri/k/X5ev5Rz/ubyeVv7Ph2xhfmCZ9zc3LvnJPKOIoahDHpFVzwhnaefPPCLTBk4LZSrTB4GBLea0dSGR5Q7f8/w/XjCDYnD5Rlf0IU7+81GbGKneXCNM6Qrxg1nzDrD6iQMB5hHdM8DjxjdHlH/AB5+eFt5gfLlhhFksGWbNwYiKjUtcDDN7yZwoP8AKNEFYrdFWIP3D6QFrcuBjqef6Qa/iMcM8YUIutrVgQORMSOtEhyB/9k=',
'images/sample-png.png' => '',
'resources/composer.phar' => '',
'theme.css' => 'aHRtbCwgYm9keSB7CiAgICBiYWNrZ3JvdW5kOiAjZjRmNGY0OwogICAgbWFyZ2luOiAwOwogICAgcGFkZGluZzogMDsKfQppbWcgewogICAgbWF4LXdpZHRoOiAxMDAlOwp9Ci50aGVtZS1taWRkbGUgewogICAgbWFyZ2luOiAwIGF1dG87CiAgICBtYXgtd2lkdGg6IDYwMHB4OwogICAgd2lkdGg6IGNhbGMoMTAwJSAtIDQwcHgpOwp9Cg==',
'theme.js' => 'd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpewogICAgY29uc29sZS5sb2coJ3dpbmRvdy5vbmxvYWQoKTogZG9uZS4nKTsKfSk7',


		);

		if( !array_key_exists($path, $resources) ){ return false; }
		return base64_decode($resources[$path]);
	}

	/**
	 * 拡張子から mime-type を得る
	 */
	public function get_mime_type($ext){
		switch( $ext ){
			case 'html':
			case 'htm':
				return 'text/html';
				break;
			case 'js':
				return 'text/javascript';
				break;
			case 'css':
			case 'scss':
				return 'text/css';
				break;
			case 'gif':
				return 'image/gif';
				break;
			case 'png':
				return 'image/png';
				break;
			case 'jpg':
			case 'jpeg':
			case 'jpe':
				return 'image/jpeg';
				break;
			case 'svg':
				return 'image/svg+xml ';
				break;
			case 'text':
			case 'txt':
			case 'log':
			case 'sh':
			case 'bat':
			case 'php':
			case 'json':
			case 'yml':
			case 'yml':
			case 'htaccess':
				return 'text/plain';
				break;
		}
		return false;
	}

}
?>